{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\n/*!\n*  filename: ej2-vue-dropdowns.umd.min.js\n*  version : 25.1.41\n*  Copyright Syncfusion Inc. 2001 - 2023. All rights reserved.\n*  Use of this code is subject to the terms of our license.\n*  A copy of the current license can be obtained at any time by e-mailing\n*  licensing@syncfusion.com. Any infringement will be prosecuted under\n*  applicable laws. \n*/\n!function (e, t) {\n  \"object\" == typeof exports && \"undefined\" != typeof module ? t(exports, require(\"@syncfusion/ej2-dropdowns\"), require(\"@syncfusion/ej2-vue-base\"), require(\"@syncfusion/ej2-base\")) : \"function\" == typeof define && define.amd ? define([\"exports\", \"@syncfusion/ej2-dropdowns\", \"@syncfusion/ej2-vue-base\", \"@syncfusion/ej2-base\"], t) : t(e.ej = {}, e.ej2Dropdowns, e.ej2VueBase, e.ej2Base);\n}(this, function (e, t, s, n) {\n  \"use strict\";\n\n  var i = [\"isLazyUpdate\", \"plugins\", \"actionFailureTemplate\", \"allowFiltering\", \"allowObjectBinding\", \"cssClass\", \"dataSource\", \"enablePersistence\", \"enableRtl\", \"enableVirtualization\", \"enabled\", \"fields\", \"filterBarPlaceholder\", \"filterType\", \"floatLabelType\", \"footerTemplate\", \"groupTemplate\", \"headerTemplate\", \"htmlAttributes\", \"ignoreAccent\", \"ignoreCase\", \"index\", \"itemTemplate\", \"locale\", \"noRecordsTemplate\", \"placeholder\", \"popupHeight\", \"popupWidth\", \"query\", \"readonly\", \"showClearButton\", \"sortOrder\", \"text\", \"value\", \"valueTemplate\", \"width\", \"zIndex\", \"actionBegin\", \"actionComplete\", \"actionFailure\", \"beforeOpen\", \"blur\", \"change\", \"close\", \"created\", \"dataBound\", \"destroyed\", \"filtering\", \"focus\", \"open\", \"select\"],\n    a = [\"value\"],\n    o = s.getProps({\n      props: i\n    }),\n    r = o[0],\n    l = o[1],\n    c = Object.keys(l);\n  c.push(\"modelchanged\", \"update:modelValue\");\n  for (var u = 0, h = a; u < h.length; u++) {\n    var d = h[u];\n    c.push(\"update:\" + d);\n  }\n  var p = s.vueDefineComponent({\n      name: \"DropDownListComponent\",\n      mixins: [s.ComponentBase],\n      props: r,\n      watch: l,\n      emits: c,\n      model: {\n        event: \"modelchanged\"\n      },\n      provide: function () {\n        return {\n          custom: this.custom\n        };\n      },\n      data: function () {\n        return {\n          ej2Instances: new t.DropDownList({}),\n          propKeys: i,\n          models: a,\n          hasChildDirective: !1,\n          hasInjectedModules: !0,\n          tagMapper: {},\n          tagNameMapper: {},\n          isVue3: !s.isExecute,\n          templateCollection: {}\n        };\n      },\n      created: function () {\n        this.ej2Instances._trigger = this.ej2Instances.trigger, this.ej2Instances.trigger = this.trigger, this.bindProperties(), this.ej2Instances._setProperties = this.ej2Instances.setProperties, this.ej2Instances.setProperties = this.setProperties, this.ej2Instances.clearTemplate = this.clearTemplate, this.updated = this.updated;\n      },\n      render: function (e) {\n        var t = s.isExecute ? e : s.gh,\n          i = null;\n        return n.isNullOrUndefined(this.$slots.default) || (i = s.isExecute ? this.$slots.default : this.$slots.default()), t(\"input\", i);\n      },\n      methods: {\n        clearTemplate: function (e) {\n          if (e || (e = Object.keys(this.templateCollection || {})), e.length && this.templateCollection) for (var t = 0, s = e; t < s.length; t++) {\n            var i = s[t],\n              a = this.templateCollection[i];\n            if (a && a.length) {\n              for (var o = 0, r = a; o < r.length; o++) {\n                var l = r[o];\n                n.getValue(\"__vue__.$destroy\", l) && l.__vue__.$destroy(), l.innerHTML && (l.innerHTML = \"\");\n              }\n              delete this.templateCollection[i];\n            }\n          }\n        },\n        setProperties: function (e, t) {\n          var s = this;\n          this.isVue3 && (this.models = this.models ? this.models : this.ej2Instances.referModels), this.ej2Instances && this.ej2Instances._setProperties && this.ej2Instances._setProperties(e, t), e && this.models && this.models.length && Object.keys(e).map(function (t) {\n            s.models.map(function (n) {\n              t !== n || /datasource/i.test(t) || (s.isVue3 ? s.ej2Instances.vueInstance.$emit(\"update:\" + t, e[t]) : (s.$emit(\"update:\" + t, e[t]), s.$emit(\"modelchanged\", e[t])));\n            });\n          });\n        },\n        trigger: function (e, t, i) {\n          if (s.isExecute || (this.models = this.models ? this.models : this.ej2Instances.referModels), \"change\" !== e && \"input\" !== e || !this.models || 0 === this.models.length) {\n            if (\"actionBegin\" === e && \"dateNavigate\" === t.requestType && this.models && 0 !== this.models.length) {\n              o = (a = this.models.toString().match(/currentView|selectedDate/) || [])[0];\n              t && a && !n.isUndefined(t[o]) && (s.isExecute ? (this.$emit(\"update:\" + o, t[o]), this.$emit(\"modelchanged\", t[o])) : (this.ej2Instances.vueInstance.$emit(\"update:\" + o, t[o]), this.ej2Instances.vueInstance.$emit(\"modelchanged\", t[o])));\n            }\n          } else {\n            var a,\n              o = (a = this.models.toString().match(/checked|value/) || [])[0];\n            t && a && !n.isUndefined(t[o]) && (s.isExecute ? (\"change\" === e || this.$props && !this.$props.isLazyUpdate) && (this.$emit(\"update:\" + o, t[o]), this.$emit(\"modelchanged\", t[o])) : (this.ej2Instances.vueInstance.$emit(\"update:\" + o, t[o]), this.ej2Instances.vueInstance.$emit(\"modelchanged\", t[o]), this.ej2Instances.vueInstance.$emit(\"update:modelValue\", t[o])));\n          }\n          this.ej2Instances && this.ej2Instances._trigger && this.ej2Instances._trigger(e, t, i);\n        },\n        custom: function () {\n          this.updated();\n        },\n        addItem: function (e, t) {\n          return this.ej2Instances.addItem(e, t);\n        },\n        clear: function () {\n          return this.ej2Instances.clear();\n        },\n        filter: function (e, t, s) {\n          return this.ej2Instances.filter(e, t, s);\n        },\n        focusIn: function (e) {\n          return this.ej2Instances.focusIn(e);\n        },\n        focusOut: function (e) {\n          return this.ej2Instances.focusOut(e);\n        },\n        getDataByValue: function (e) {\n          return this.ej2Instances.getDataByValue(e);\n        },\n        getItems: function () {\n          return this.ej2Instances.getItems();\n        },\n        hidePopup: function (e) {\n          return this.ej2Instances.hidePopup(e);\n        },\n        hideSpinner: function () {\n          return this.ej2Instances.hideSpinner();\n        },\n        requiredModules: function () {\n          return this.ej2Instances.requiredModules();\n        },\n        showPopup: function (e) {\n          return this.ej2Instances.showPopup(e);\n        },\n        showSpinner: function () {\n          return this.ej2Instances.showSpinner();\n        }\n      }\n    }),\n    m = {\n      name: \"ejs-dropdownlist\",\n      install: function (e) {\n        e.component(m.name, p);\n      }\n    },\n    g = [\"isLazyUpdate\", \"plugins\", \"actionFailureTemplate\", \"allowCustom\", \"allowFiltering\", \"allowObjectBinding\", \"autofill\", \"cssClass\", \"dataSource\", \"enablePersistence\", \"enableRtl\", \"enableVirtualization\", \"enabled\", \"fields\", \"filterBarPlaceholder\", \"filterType\", \"floatLabelType\", \"footerTemplate\", \"groupTemplate\", \"headerTemplate\", \"htmlAttributes\", \"ignoreAccent\", \"ignoreCase\", \"index\", \"itemTemplate\", \"locale\", \"noRecordsTemplate\", \"placeholder\", \"popupHeight\", \"popupWidth\", \"query\", \"readonly\", \"showClearButton\", \"sortOrder\", \"text\", \"value\", \"valueTemplate\", \"width\", \"zIndex\", \"actionBegin\", \"actionComplete\", \"actionFailure\", \"beforeOpen\", \"blur\", \"change\", \"close\", \"created\", \"customValueSpecifier\", \"dataBound\", \"destroyed\", \"filtering\", \"focus\", \"open\", \"select\"],\n    f = [\"value\"],\n    I = s.getProps({\n      props: g\n    }),\n    j = I[0],\n    v = I[1],\n    $ = Object.keys(v);\n  $.push(\"modelchanged\", \"update:modelValue\");\n  for (var y = 0, C = f; y < C.length; y++) {\n    var T = C[y];\n    $.push(\"update:\" + T);\n  }\n  var P = s.vueDefineComponent({\n      name: \"ComboBoxComponent\",\n      mixins: [s.ComponentBase],\n      props: j,\n      watch: v,\n      emits: $,\n      model: {\n        event: \"modelchanged\"\n      },\n      provide: function () {\n        return {\n          custom: this.custom\n        };\n      },\n      data: function () {\n        return {\n          ej2Instances: new t.ComboBox({}),\n          propKeys: g,\n          models: f,\n          hasChildDirective: !1,\n          hasInjectedModules: !0,\n          tagMapper: {},\n          tagNameMapper: {},\n          isVue3: !s.isExecute,\n          templateCollection: {}\n        };\n      },\n      created: function () {\n        this.ej2Instances._trigger = this.ej2Instances.trigger, this.ej2Instances.trigger = this.trigger, this.bindProperties(), this.ej2Instances._setProperties = this.ej2Instances.setProperties, this.ej2Instances.setProperties = this.setProperties, this.ej2Instances.clearTemplate = this.clearTemplate, this.updated = this.updated;\n      },\n      render: function (e) {\n        var t = s.isExecute ? e : s.gh,\n          i = null;\n        return n.isNullOrUndefined(this.$slots.default) || (i = s.isExecute ? this.$slots.default : this.$slots.default()), t(\"input\", i);\n      },\n      methods: {\n        clearTemplate: function (e) {\n          if (e || (e = Object.keys(this.templateCollection || {})), e.length && this.templateCollection) for (var t = 0, s = e; t < s.length; t++) {\n            var i = s[t],\n              a = this.templateCollection[i];\n            if (a && a.length) {\n              for (var o = 0, r = a; o < r.length; o++) {\n                var l = r[o];\n                n.getValue(\"__vue__.$destroy\", l) && l.__vue__.$destroy(), l.innerHTML && (l.innerHTML = \"\");\n              }\n              delete this.templateCollection[i];\n            }\n          }\n        },\n        setProperties: function (e, t) {\n          var s = this;\n          this.isVue3 && (this.models = this.models ? this.models : this.ej2Instances.referModels), this.ej2Instances && this.ej2Instances._setProperties && this.ej2Instances._setProperties(e, t), e && this.models && this.models.length && Object.keys(e).map(function (t) {\n            s.models.map(function (n) {\n              t !== n || /datasource/i.test(t) || (s.isVue3 ? s.ej2Instances.vueInstance.$emit(\"update:\" + t, e[t]) : (s.$emit(\"update:\" + t, e[t]), s.$emit(\"modelchanged\", e[t])));\n            });\n          });\n        },\n        trigger: function (e, t, i) {\n          if (s.isExecute || (this.models = this.models ? this.models : this.ej2Instances.referModels), \"change\" !== e && \"input\" !== e || !this.models || 0 === this.models.length) {\n            if (\"actionBegin\" === e && \"dateNavigate\" === t.requestType && this.models && 0 !== this.models.length) {\n              o = (a = this.models.toString().match(/currentView|selectedDate/) || [])[0];\n              t && a && !n.isUndefined(t[o]) && (s.isExecute ? (this.$emit(\"update:\" + o, t[o]), this.$emit(\"modelchanged\", t[o])) : (this.ej2Instances.vueInstance.$emit(\"update:\" + o, t[o]), this.ej2Instances.vueInstance.$emit(\"modelchanged\", t[o])));\n            }\n          } else {\n            var a,\n              o = (a = this.models.toString().match(/checked|value/) || [])[0];\n            t && a && !n.isUndefined(t[o]) && (s.isExecute ? (\"change\" === e || this.$props && !this.$props.isLazyUpdate) && (this.$emit(\"update:\" + o, t[o]), this.$emit(\"modelchanged\", t[o])) : (this.ej2Instances.vueInstance.$emit(\"update:\" + o, t[o]), this.ej2Instances.vueInstance.$emit(\"modelchanged\", t[o]), this.ej2Instances.vueInstance.$emit(\"update:modelValue\", t[o])));\n          }\n          this.ej2Instances && this.ej2Instances._trigger && this.ej2Instances._trigger(e, t, i);\n        },\n        custom: function () {\n          this.updated();\n        },\n        addItem: function (e, t) {\n          return this.ej2Instances.addItem(e, t);\n        },\n        clear: function () {\n          return this.ej2Instances.clear();\n        },\n        filter: function (e, t, s) {\n          return this.ej2Instances.filter(e, t, s);\n        },\n        focusIn: function () {\n          return this.ej2Instances.focusIn();\n        },\n        focusOut: function (e) {\n          return this.ej2Instances.focusOut(e);\n        },\n        getDataByValue: function (e) {\n          return this.ej2Instances.getDataByValue(e);\n        },\n        getItems: function () {\n          return this.ej2Instances.getItems();\n        },\n        hidePopup: function (e) {\n          return this.ej2Instances.hidePopup(e);\n        },\n        hideSpinner: function () {\n          return this.ej2Instances.hideSpinner();\n        },\n        requiredModules: function () {\n          return this.ej2Instances.requiredModules();\n        },\n        showPopup: function (e) {\n          return this.ej2Instances.showPopup(e);\n        },\n        showSpinner: function () {\n          return this.ej2Instances.showSpinner();\n        }\n      }\n    }),\n    b = {\n      name: \"ejs-combobox\",\n      install: function (e) {\n        e.component(b.name, P);\n      }\n    },\n    _ = [\"isLazyUpdate\", \"plugins\", \"actionFailureTemplate\", \"allowCustom\", \"allowFiltering\", \"allowObjectBinding\", \"autofill\", \"cssClass\", \"dataSource\", \"enablePersistence\", \"enableRtl\", \"enableVirtualization\", \"enabled\", \"fields\", \"filterBarPlaceholder\", \"filterType\", \"floatLabelType\", \"footerTemplate\", \"groupTemplate\", \"headerTemplate\", \"highlight\", \"htmlAttributes\", \"ignoreAccent\", \"ignoreCase\", \"index\", \"itemTemplate\", \"locale\", \"minLength\", \"noRecordsTemplate\", \"placeholder\", \"popupHeight\", \"popupWidth\", \"query\", \"readonly\", \"showClearButton\", \"showPopupButton\", \"sortOrder\", \"suggestionCount\", \"text\", \"value\", \"valueTemplate\", \"width\", \"zIndex\", \"actionBegin\", \"actionComplete\", \"actionFailure\", \"beforeOpen\", \"blur\", \"change\", \"close\", \"created\", \"customValueSpecifier\", \"dataBound\", \"destroyed\", \"filtering\", \"focus\", \"open\", \"select\"],\n    w = [\"value\"],\n    x = s.getProps({\n      props: _\n    }),\n    B = x[0],\n    V = x[1],\n    M = Object.keys(V);\n  M.push(\"modelchanged\", \"update:modelValue\");\n  for (var S = 0, D = w; S < D.length; S++) {\n    var O = D[S];\n    M.push(\"update:\" + O);\n  }\n  var L = s.vueDefineComponent({\n      name: \"AutoCompleteComponent\",\n      mixins: [s.ComponentBase],\n      props: B,\n      watch: V,\n      emits: M,\n      model: {\n        event: \"modelchanged\"\n      },\n      provide: function () {\n        return {\n          custom: this.custom\n        };\n      },\n      data: function () {\n        return {\n          ej2Instances: new t.AutoComplete({}),\n          propKeys: _,\n          models: w,\n          hasChildDirective: !1,\n          hasInjectedModules: !0,\n          tagMapper: {},\n          tagNameMapper: {},\n          isVue3: !s.isExecute,\n          templateCollection: {}\n        };\n      },\n      created: function () {\n        this.ej2Instances._trigger = this.ej2Instances.trigger, this.ej2Instances.trigger = this.trigger, this.bindProperties(), this.ej2Instances._setProperties = this.ej2Instances.setProperties, this.ej2Instances.setProperties = this.setProperties, this.ej2Instances.clearTemplate = this.clearTemplate, this.updated = this.updated;\n      },\n      render: function (e) {\n        var t = s.isExecute ? e : s.gh,\n          i = null;\n        return n.isNullOrUndefined(this.$slots.default) || (i = s.isExecute ? this.$slots.default : this.$slots.default()), t(\"input\", i);\n      },\n      methods: {\n        clearTemplate: function (e) {\n          if (e || (e = Object.keys(this.templateCollection || {})), e.length && this.templateCollection) for (var t = 0, s = e; t < s.length; t++) {\n            var i = s[t],\n              a = this.templateCollection[i];\n            if (a && a.length) {\n              for (var o = 0, r = a; o < r.length; o++) {\n                var l = r[o];\n                n.getValue(\"__vue__.$destroy\", l) && l.__vue__.$destroy(), l.innerHTML && (l.innerHTML = \"\");\n              }\n              delete this.templateCollection[i];\n            }\n          }\n        },\n        setProperties: function (e, t) {\n          var s = this;\n          this.isVue3 && (this.models = this.models ? this.models : this.ej2Instances.referModels), this.ej2Instances && this.ej2Instances._setProperties && this.ej2Instances._setProperties(e, t), e && this.models && this.models.length && Object.keys(e).map(function (t) {\n            s.models.map(function (n) {\n              t !== n || /datasource/i.test(t) || (s.isVue3 ? s.ej2Instances.vueInstance.$emit(\"update:\" + t, e[t]) : (s.$emit(\"update:\" + t, e[t]), s.$emit(\"modelchanged\", e[t])));\n            });\n          });\n        },\n        trigger: function (e, t, i) {\n          if (s.isExecute || (this.models = this.models ? this.models : this.ej2Instances.referModels), \"change\" !== e && \"input\" !== e || !this.models || 0 === this.models.length) {\n            if (\"actionBegin\" === e && \"dateNavigate\" === t.requestType && this.models && 0 !== this.models.length) {\n              o = (a = this.models.toString().match(/currentView|selectedDate/) || [])[0];\n              t && a && !n.isUndefined(t[o]) && (s.isExecute ? (this.$emit(\"update:\" + o, t[o]), this.$emit(\"modelchanged\", t[o])) : (this.ej2Instances.vueInstance.$emit(\"update:\" + o, t[o]), this.ej2Instances.vueInstance.$emit(\"modelchanged\", t[o])));\n            }\n          } else {\n            var a,\n              o = (a = this.models.toString().match(/checked|value/) || [])[0];\n            t && a && !n.isUndefined(t[o]) && (s.isExecute ? (\"change\" === e || this.$props && !this.$props.isLazyUpdate) && (this.$emit(\"update:\" + o, t[o]), this.$emit(\"modelchanged\", t[o])) : (this.ej2Instances.vueInstance.$emit(\"update:\" + o, t[o]), this.ej2Instances.vueInstance.$emit(\"modelchanged\", t[o]), this.ej2Instances.vueInstance.$emit(\"update:modelValue\", t[o])));\n          }\n          this.ej2Instances && this.ej2Instances._trigger && this.ej2Instances._trigger(e, t, i);\n        },\n        custom: function () {\n          this.updated();\n        },\n        addItem: function (e, t) {\n          return this.ej2Instances.addItem(e, t);\n        },\n        clear: function () {\n          return this.ej2Instances.clear();\n        },\n        filter: function (e, t, s) {\n          return this.ej2Instances.filter(e, t, s);\n        },\n        focusIn: function () {\n          return this.ej2Instances.focusIn();\n        },\n        focusOut: function (e) {\n          return this.ej2Instances.focusOut(e);\n        },\n        getDataByValue: function (e) {\n          return this.ej2Instances.getDataByValue(e);\n        },\n        getItems: function () {\n          return this.ej2Instances.getItems();\n        },\n        hidePopup: function (e) {\n          return this.ej2Instances.hidePopup(e);\n        },\n        hideSpinner: function () {\n          return this.ej2Instances.hideSpinner();\n        },\n        requiredModules: function () {\n          return this.ej2Instances.requiredModules();\n        },\n        showPopup: function (e) {\n          return this.ej2Instances.showPopup(e);\n        },\n        showSpinner: function () {\n          return this.ej2Instances.showSpinner();\n        }\n      }\n    }),\n    E = {\n      name: \"ejs-autocomplete\",\n      install: function (e) {\n        e.component(E.name, L);\n      }\n    },\n    U = [\"isLazyUpdate\", \"plugins\", \"actionFailureTemplate\", \"addTagOnBlur\", \"allowCustomValue\", \"allowFiltering\", \"allowObjectBinding\", \"changeOnBlur\", \"closePopupOnSelect\", \"cssClass\", \"dataSource\", \"delimiterChar\", \"enableGroupCheckBox\", \"enableHtmlSanitizer\", \"enablePersistence\", \"enableRtl\", \"enableSelectionOrder\", \"enableVirtualization\", \"enabled\", \"fields\", \"filterBarPlaceholder\", \"filterType\", \"floatLabelType\", \"footerTemplate\", \"groupTemplate\", \"headerTemplate\", \"hideSelectedItem\", \"htmlAttributes\", \"ignoreAccent\", \"ignoreCase\", \"itemTemplate\", \"locale\", \"maximumSelectionLength\", \"mode\", \"noRecordsTemplate\", \"openOnClick\", \"placeholder\", \"popupHeight\", \"popupWidth\", \"query\", \"readonly\", \"selectAllText\", \"showClearButton\", \"showDropDownIcon\", \"showSelectAll\", \"sortOrder\", \"text\", \"unSelectAllText\", \"value\", \"valueTemplate\", \"width\", \"zIndex\", \"actionBegin\", \"actionComplete\", \"actionFailure\", \"beforeOpen\", \"beforeSelectAll\", \"blur\", \"change\", \"chipSelection\", \"close\", \"created\", \"customValueSelection\", \"dataBound\", \"destroyed\", \"filtering\", \"focus\", \"open\", \"removed\", \"removing\", \"select\", \"selectedAll\", \"tagging\"],\n    k = [\"value\"],\n    A = s.getProps({\n      props: U\n    }),\n    q = A[0],\n    z = A[1],\n    H = Object.keys(z);\n  H.push(\"modelchanged\", \"update:modelValue\");\n  for (var N = 0, F = k; N < F.length; N++) {\n    var R = F[N];\n    H.push(\"update:\" + R);\n  }\n  var K = s.vueDefineComponent({\n      name: \"MultiSelectComponent\",\n      mixins: [s.ComponentBase],\n      props: q,\n      watch: z,\n      emits: H,\n      model: {\n        event: \"modelchanged\"\n      },\n      provide: function () {\n        return {\n          custom: this.custom\n        };\n      },\n      data: function () {\n        return {\n          ej2Instances: new t.MultiSelect({}),\n          propKeys: U,\n          models: k,\n          hasChildDirective: !1,\n          hasInjectedModules: !0,\n          tagMapper: {},\n          tagNameMapper: {},\n          isVue3: !s.isExecute,\n          templateCollection: {}\n        };\n      },\n      created: function () {\n        this.ej2Instances._trigger = this.ej2Instances.trigger, this.ej2Instances.trigger = this.trigger, this.bindProperties(), this.ej2Instances._setProperties = this.ej2Instances.setProperties, this.ej2Instances.setProperties = this.setProperties, this.ej2Instances.clearTemplate = this.clearTemplate, this.updated = this.updated;\n      },\n      render: function (e) {\n        var t = s.isExecute ? e : s.gh,\n          i = null;\n        return n.isNullOrUndefined(this.$slots.default) || (i = s.isExecute ? this.$slots.default : this.$slots.default()), t(\"input\", i);\n      },\n      methods: {\n        clearTemplate: function (e) {\n          if (e || (e = Object.keys(this.templateCollection || {})), e.length && this.templateCollection) for (var t = 0, s = e; t < s.length; t++) {\n            var i = s[t],\n              a = this.templateCollection[i];\n            if (a && a.length) {\n              for (var o = 0, r = a; o < r.length; o++) {\n                var l = r[o];\n                n.getValue(\"__vue__.$destroy\", l) && l.__vue__.$destroy(), l.innerHTML && (l.innerHTML = \"\");\n              }\n              delete this.templateCollection[i];\n            }\n          }\n        },\n        setProperties: function (e, t) {\n          var s = this;\n          this.isVue3 && (this.models = this.models ? this.models : this.ej2Instances.referModels), this.ej2Instances && this.ej2Instances._setProperties && this.ej2Instances._setProperties(e, t), e && this.models && this.models.length && Object.keys(e).map(function (t) {\n            s.models.map(function (n) {\n              t !== n || /datasource/i.test(t) || (s.isVue3 ? s.ej2Instances.vueInstance.$emit(\"update:\" + t, e[t]) : (s.$emit(\"update:\" + t, e[t]), s.$emit(\"modelchanged\", e[t])));\n            });\n          });\n        },\n        trigger: function (e, t, i) {\n          if (s.isExecute || (this.models = this.models ? this.models : this.ej2Instances.referModels), \"change\" !== e && \"input\" !== e || !this.models || 0 === this.models.length) {\n            if (\"actionBegin\" === e && \"dateNavigate\" === t.requestType && this.models && 0 !== this.models.length) {\n              o = (a = this.models.toString().match(/currentView|selectedDate/) || [])[0];\n              t && a && !n.isUndefined(t[o]) && (s.isExecute ? (this.$emit(\"update:\" + o, t[o]), this.$emit(\"modelchanged\", t[o])) : (this.ej2Instances.vueInstance.$emit(\"update:\" + o, t[o]), this.ej2Instances.vueInstance.$emit(\"modelchanged\", t[o])));\n            }\n          } else {\n            var a,\n              o = (a = this.models.toString().match(/checked|value/) || [])[0];\n            t && a && !n.isUndefined(t[o]) && (s.isExecute ? (\"change\" === e || this.$props && !this.$props.isLazyUpdate) && (this.$emit(\"update:\" + o, t[o]), this.$emit(\"modelchanged\", t[o])) : (this.ej2Instances.vueInstance.$emit(\"update:\" + o, t[o]), this.ej2Instances.vueInstance.$emit(\"modelchanged\", t[o]), this.ej2Instances.vueInstance.$emit(\"update:modelValue\", t[o])));\n          }\n          this.ej2Instances && this.ej2Instances._trigger && this.ej2Instances._trigger(e, t, i);\n        },\n        custom: function () {\n          this.updated();\n        },\n        addItem: function (e, t) {\n          return this.ej2Instances.addItem(e, t);\n        },\n        clear: function () {\n          return this.ej2Instances.clear();\n        },\n        filter: function (e, t, s) {\n          return this.ej2Instances.filter(e, t, s);\n        },\n        focusIn: function () {\n          return this.ej2Instances.focusIn();\n        },\n        focusOut: function () {\n          return this.ej2Instances.focusOut();\n        },\n        getDataByValue: function (e) {\n          return this.ej2Instances.getDataByValue(e);\n        },\n        getItems: function () {\n          return this.ej2Instances.getItems();\n        },\n        hidePopup: function (e) {\n          return this.ej2Instances.hidePopup(e);\n        },\n        hideSpinner: function () {\n          return this.ej2Instances.hideSpinner();\n        },\n        requiredModules: function () {\n          return this.ej2Instances.requiredModules();\n        },\n        selectAll: function (e) {\n          return this.ej2Instances.selectAll(e);\n        },\n        showPopup: function (e) {\n          return this.ej2Instances.showPopup(e);\n        },\n        showSpinner: function () {\n          return this.ej2Instances.showSpinner();\n        }\n      }\n    }),\n    W = {\n      name: \"ejs-multiselect\",\n      install: function (e) {\n        e.component(W.name, K);\n      }\n    },\n    G = [\"isLazyUpdate\", \"plugins\", \"actionFailureTemplate\", \"allowDragAndDrop\", \"allowFiltering\", \"cssClass\", \"dataSource\", \"enablePersistence\", \"enableRtl\", \"enabled\", \"fields\", \"filterBarPlaceholder\", \"filterType\", \"groupTemplate\", \"height\", \"ignoreAccent\", \"ignoreCase\", \"itemTemplate\", \"locale\", \"maximumSelectionLength\", \"noRecordsTemplate\", \"query\", \"scope\", \"selectionSettings\", \"sortOrder\", \"toolbarSettings\", \"value\", \"zIndex\", \"actionBegin\", \"actionComplete\", \"actionFailure\", \"beforeDrop\", \"beforeItemRender\", \"change\", \"created\", \"dataBound\", \"destroyed\", \"drag\", \"dragStart\", \"drop\", \"filtering\", \"select\"],\n    J = [\"value\"],\n    Q = s.getProps({\n      props: G\n    }),\n    X = Q[0],\n    Y = Q[1],\n    Z = Object.keys(Y);\n  Z.push(\"modelchanged\", \"update:modelValue\");\n  for (var ee = 0, te = J; ee < te.length; ee++) {\n    var se = te[ee];\n    Z.push(\"update:\" + se);\n  }\n  var ne = s.vueDefineComponent({\n      name: \"ListBoxComponent\",\n      mixins: [s.ComponentBase],\n      props: X,\n      watch: Y,\n      emits: Z,\n      model: {\n        event: \"modelchanged\"\n      },\n      provide: function () {\n        return {\n          custom: this.custom\n        };\n      },\n      data: function () {\n        return {\n          ej2Instances: new t.ListBox({}),\n          propKeys: G,\n          models: J,\n          hasChildDirective: !1,\n          hasInjectedModules: !0,\n          tagMapper: {},\n          tagNameMapper: {},\n          isVue3: !s.isExecute,\n          templateCollection: {}\n        };\n      },\n      created: function () {\n        this.ej2Instances._trigger = this.ej2Instances.trigger, this.ej2Instances.trigger = this.trigger, this.bindProperties(), this.ej2Instances._setProperties = this.ej2Instances.setProperties, this.ej2Instances.setProperties = this.setProperties, this.ej2Instances.clearTemplate = this.clearTemplate, this.updated = this.updated;\n      },\n      render: function (e) {\n        var t = s.isExecute ? e : s.gh,\n          i = null;\n        return n.isNullOrUndefined(this.$slots.default) || (i = s.isExecute ? this.$slots.default : this.$slots.default()), t(\"input\", i);\n      },\n      methods: {\n        clearTemplate: function (e) {\n          if (e || (e = Object.keys(this.templateCollection || {})), e.length && this.templateCollection) for (var t = 0, s = e; t < s.length; t++) {\n            var i = s[t],\n              a = this.templateCollection[i];\n            if (a && a.length) {\n              for (var o = 0, r = a; o < r.length; o++) {\n                var l = r[o];\n                n.getValue(\"__vue__.$destroy\", l) && l.__vue__.$destroy(), l.innerHTML && (l.innerHTML = \"\");\n              }\n              delete this.templateCollection[i];\n            }\n          }\n        },\n        setProperties: function (e, t) {\n          var s = this;\n          this.isVue3 && (this.models = this.models ? this.models : this.ej2Instances.referModels), this.ej2Instances && this.ej2Instances._setProperties && this.ej2Instances._setProperties(e, t), e && this.models && this.models.length && Object.keys(e).map(function (t) {\n            s.models.map(function (n) {\n              t !== n || /datasource/i.test(t) || (s.isVue3 ? s.ej2Instances.vueInstance.$emit(\"update:\" + t, e[t]) : (s.$emit(\"update:\" + t, e[t]), s.$emit(\"modelchanged\", e[t])));\n            });\n          });\n        },\n        trigger: function (e, t, i) {\n          if (s.isExecute || (this.models = this.models ? this.models : this.ej2Instances.referModels), \"change\" !== e && \"input\" !== e || !this.models || 0 === this.models.length) {\n            if (\"actionBegin\" === e && \"dateNavigate\" === t.requestType && this.models && 0 !== this.models.length) {\n              o = (a = this.models.toString().match(/currentView|selectedDate/) || [])[0];\n              t && a && !n.isUndefined(t[o]) && (s.isExecute ? (this.$emit(\"update:\" + o, t[o]), this.$emit(\"modelchanged\", t[o])) : (this.ej2Instances.vueInstance.$emit(\"update:\" + o, t[o]), this.ej2Instances.vueInstance.$emit(\"modelchanged\", t[o])));\n            }\n          } else {\n            var a,\n              o = (a = this.models.toString().match(/checked|value/) || [])[0];\n            t && a && !n.isUndefined(t[o]) && (s.isExecute ? (\"change\" === e || this.$props && !this.$props.isLazyUpdate) && (this.$emit(\"update:\" + o, t[o]), this.$emit(\"modelchanged\", t[o])) : (this.ej2Instances.vueInstance.$emit(\"update:\" + o, t[o]), this.ej2Instances.vueInstance.$emit(\"modelchanged\", t[o]), this.ej2Instances.vueInstance.$emit(\"update:modelValue\", t[o])));\n          }\n          this.ej2Instances && this.ej2Instances._trigger && this.ej2Instances._trigger(e, t, i);\n        },\n        custom: function () {\n          this.updated();\n        },\n        addItems: function (e, t) {\n          return this.ej2Instances.addItems(e, t);\n        },\n        enableItems: function (e, t, s) {\n          return this.ej2Instances.enableItems(e, t, s);\n        },\n        filter: function (e, t, s) {\n          return this.ej2Instances.filter(e, t, s);\n        },\n        getDataByValue: function (e) {\n          return this.ej2Instances.getDataByValue(e);\n        },\n        getDataByValues: function (e) {\n          return this.ej2Instances.getDataByValues(e);\n        },\n        getDataList: function () {\n          return this.ej2Instances.getDataList();\n        },\n        getItems: function () {\n          return this.ej2Instances.getItems();\n        },\n        getSortedList: function () {\n          return this.ej2Instances.getSortedList();\n        },\n        hideSpinner: function () {\n          return this.ej2Instances.hideSpinner();\n        },\n        moveAllTo: function (e, t) {\n          return this.ej2Instances.moveAllTo(e, t);\n        },\n        moveBottom: function (e) {\n          return this.ej2Instances.moveBottom(e);\n        },\n        moveDown: function (e) {\n          return this.ej2Instances.moveDown(e);\n        },\n        moveTo: function (e, t, s) {\n          return this.ej2Instances.moveTo(e, t, s);\n        },\n        moveTop: function (e) {\n          return this.ej2Instances.moveTop(e);\n        },\n        moveUp: function (e) {\n          return this.ej2Instances.moveUp(e);\n        },\n        removeItem: function (e, t) {\n          return this.ej2Instances.removeItem(e, t);\n        },\n        removeItems: function (e, t) {\n          return this.ej2Instances.removeItems(e, t);\n        },\n        requiredModules: function () {\n          return this.ej2Instances.requiredModules();\n        },\n        selectAll: function (e) {\n          return this.ej2Instances.selectAll(e);\n        },\n        selectItems: function (e, t, s) {\n          return this.ej2Instances.selectItems(e, t, s);\n        },\n        showSpinner: function () {\n          return this.ej2Instances.showSpinner();\n        }\n      }\n    }),\n    ie = {\n      name: \"ejs-listbox\",\n      install: function (e) {\n        e.component(ie.name, ne);\n      }\n    },\n    ae = [\"isLazyUpdate\", \"plugins\", \"actionFailureTemplate\", \"allowFiltering\", \"allowMultiSelection\", \"changeOnBlur\", \"cssClass\", \"customTemplate\", \"delimiterChar\", \"destroyPopupOnHide\", \"enableHtmlSanitizer\", \"enablePersistence\", \"enableRtl\", \"enabled\", \"fields\", \"filterBarPlaceholder\", \"filterType\", \"floatLabelType\", \"footerTemplate\", \"headerTemplate\", \"htmlAttributes\", \"ignoreAccent\", \"ignoreCase\", \"itemTemplate\", \"locale\", \"mode\", \"noRecordsTemplate\", \"placeholder\", \"popupHeight\", \"popupWidth\", \"readonly\", \"selectAllText\", \"showCheckBox\", \"showClearButton\", \"showDropDownIcon\", \"showSelectAll\", \"sortOrder\", \"text\", \"treeSettings\", \"unSelectAllText\", \"value\", \"width\", \"wrapText\", \"zIndex\", \"actionFailure\", \"beforeOpen\", \"blur\", \"change\", \"close\", \"created\", \"dataBound\", \"destroyed\", \"filtering\", \"focus\", \"keyPress\", \"open\", \"select\"],\n    oe = [\"value\"],\n    re = s.getProps({\n      props: ae\n    }),\n    le = re[0],\n    ce = re[1],\n    ue = Object.keys(ce);\n  ue.push(\"modelchanged\", \"update:modelValue\");\n  for (var he = 0, de = oe; he < de.length; he++) {\n    var pe = de[he];\n    ue.push(\"update:\" + pe);\n  }\n  var me = s.vueDefineComponent({\n      name: \"DropDownTreeComponent\",\n      mixins: [s.ComponentBase],\n      props: le,\n      watch: ce,\n      emits: ue,\n      model: {\n        event: \"modelchanged\"\n      },\n      provide: function () {\n        return {\n          custom: this.custom\n        };\n      },\n      data: function () {\n        return {\n          ej2Instances: new t.DropDownTree({}),\n          propKeys: ae,\n          models: oe,\n          hasChildDirective: !1,\n          hasInjectedModules: !1,\n          tagMapper: {},\n          tagNameMapper: {},\n          isVue3: !s.isExecute,\n          templateCollection: {}\n        };\n      },\n      created: function () {\n        this.ej2Instances._trigger = this.ej2Instances.trigger, this.ej2Instances.trigger = this.trigger, this.bindProperties(), this.ej2Instances._setProperties = this.ej2Instances.setProperties, this.ej2Instances.setProperties = this.setProperties, this.ej2Instances.clearTemplate = this.clearTemplate, this.updated = this.updated;\n      },\n      render: function (e) {\n        var t = s.isExecute ? e : s.gh,\n          i = null;\n        return n.isNullOrUndefined(this.$slots.default) || (i = s.isExecute ? this.$slots.default : this.$slots.default()), t(\"input\", i);\n      },\n      methods: {\n        clearTemplate: function (e) {\n          if (e || (e = Object.keys(this.templateCollection || {})), e.length && this.templateCollection) for (var t = 0, s = e; t < s.length; t++) {\n            var i = s[t],\n              a = this.templateCollection[i];\n            if (a && a.length) {\n              for (var o = 0, r = a; o < r.length; o++) {\n                var l = r[o];\n                n.getValue(\"__vue__.$destroy\", l) && l.__vue__.$destroy(), l.innerHTML && (l.innerHTML = \"\");\n              }\n              delete this.templateCollection[i];\n            }\n          }\n        },\n        setProperties: function (e, t) {\n          var s = this;\n          this.isVue3 && (this.models = this.models ? this.models : this.ej2Instances.referModels), this.ej2Instances && this.ej2Instances._setProperties && this.ej2Instances._setProperties(e, t), e && this.models && this.models.length && Object.keys(e).map(function (t) {\n            s.models.map(function (n) {\n              t !== n || /datasource/i.test(t) || (s.isVue3 ? s.ej2Instances.vueInstance.$emit(\"update:\" + t, e[t]) : (s.$emit(\"update:\" + t, e[t]), s.$emit(\"modelchanged\", e[t])));\n            });\n          });\n        },\n        trigger: function (e, t, i) {\n          if (s.isExecute || (this.models = this.models ? this.models : this.ej2Instances.referModels), \"change\" !== e && \"input\" !== e || !this.models || 0 === this.models.length) {\n            if (\"actionBegin\" === e && \"dateNavigate\" === t.requestType && this.models && 0 !== this.models.length) {\n              o = (a = this.models.toString().match(/currentView|selectedDate/) || [])[0];\n              t && a && !n.isUndefined(t[o]) && (s.isExecute ? (this.$emit(\"update:\" + o, t[o]), this.$emit(\"modelchanged\", t[o])) : (this.ej2Instances.vueInstance.$emit(\"update:\" + o, t[o]), this.ej2Instances.vueInstance.$emit(\"modelchanged\", t[o])));\n            }\n          } else {\n            var a,\n              o = (a = this.models.toString().match(/checked|value/) || [])[0];\n            t && a && !n.isUndefined(t[o]) && (s.isExecute ? (\"change\" === e || this.$props && !this.$props.isLazyUpdate) && (this.$emit(\"update:\" + o, t[o]), this.$emit(\"modelchanged\", t[o])) : (this.ej2Instances.vueInstance.$emit(\"update:\" + o, t[o]), this.ej2Instances.vueInstance.$emit(\"modelchanged\", t[o]), this.ej2Instances.vueInstance.$emit(\"update:modelValue\", t[o])));\n          }\n          this.ej2Instances && this.ej2Instances._trigger && this.ej2Instances._trigger(e, t, i);\n        },\n        custom: function () {\n          this.updated();\n        },\n        clear: function () {\n          return this.ej2Instances.clear();\n        },\n        ensureVisible: function (e) {\n          return this.ej2Instances.ensureVisible(e);\n        },\n        getData: function (e) {\n          return this.ej2Instances.getData(e);\n        },\n        getLocaleName: function () {\n          return this.ej2Instances.getLocaleName();\n        },\n        hidePopup: function () {\n          return this.ej2Instances.hidePopup();\n        },\n        selectAll: function (e) {\n          return this.ej2Instances.selectAll(e);\n        },\n        showPopup: function () {\n          return this.ej2Instances.showPopup();\n        }\n      }\n    }),\n    ge = {\n      name: \"ejs-dropdowntree\",\n      install: function (e) {\n        e.component(ge.name, me);\n      }\n    },\n    fe = [\"isLazyUpdate\", \"plugins\", \"allowSpaces\", \"cssClass\", \"dataSource\", \"displayTemplate\", \"fields\", \"filterType\", \"highlight\", \"ignoreCase\", \"itemTemplate\", \"locale\", \"mentionChar\", \"minLength\", \"noRecordsTemplate\", \"popupHeight\", \"popupWidth\", \"query\", \"showMentionChar\", \"sortOrder\", \"spinnerTemplate\", \"suffixText\", \"suggestionCount\", \"target\", \"actionBegin\", \"actionComplete\", \"actionFailure\", \"beforeOpen\", \"change\", \"closed\", \"created\", \"destroyed\", \"filtering\", \"opened\", \"select\"],\n    Ie = [],\n    je = s.getProps({\n      props: fe\n    }),\n    ve = je[0],\n    $e = je[1],\n    ye = Object.keys($e);\n  ye.push(\"modelchanged\", \"update:modelValue\");\n  for (var Ce = 0, Te = Ie; Ce < Te.length; Ce++) {\n    var Pe = Te[Ce];\n    ye.push(\"update:\" + Pe);\n  }\n  var be = s.vueDefineComponent({\n      name: \"MentionComponent\",\n      mixins: [s.ComponentBase],\n      props: ve,\n      watch: $e,\n      emits: ye,\n      provide: function () {\n        return {\n          custom: this.custom\n        };\n      },\n      data: function () {\n        return {\n          ej2Instances: new t.Mention({}),\n          propKeys: fe,\n          models: Ie,\n          hasChildDirective: !1,\n          hasInjectedModules: !1,\n          tagMapper: {},\n          tagNameMapper: {},\n          isVue3: !s.isExecute,\n          templateCollection: {}\n        };\n      },\n      created: function () {\n        this.bindProperties(), this.ej2Instances._setProperties = this.ej2Instances.setProperties, this.ej2Instances.setProperties = this.setProperties, this.ej2Instances.clearTemplate = this.clearTemplate, this.updated = this.updated;\n      },\n      render: function (e) {\n        var t = s.isExecute ? e : s.gh,\n          i = null;\n        return n.isNullOrUndefined(this.$slots.default) || (i = s.isExecute ? this.$slots.default : this.$slots.default()), t(\"div\", i);\n      },\n      methods: {\n        clearTemplate: function (e) {\n          if (e || (e = Object.keys(this.templateCollection || {})), e.length && this.templateCollection) for (var t = 0, s = e; t < s.length; t++) {\n            var i = s[t],\n              a = this.templateCollection[i];\n            if (a && a.length) {\n              for (var o = 0, r = a; o < r.length; o++) {\n                var l = r[o];\n                n.getValue(\"__vue__.$destroy\", l) && l.__vue__.$destroy(), l.innerHTML && (l.innerHTML = \"\");\n              }\n              delete this.templateCollection[i];\n            }\n          }\n        },\n        setProperties: function (e, t) {\n          var s = this;\n          this.isVue3 && (this.models = this.models ? this.models : this.ej2Instances.referModels), this.ej2Instances && this.ej2Instances._setProperties && this.ej2Instances._setProperties(e, t), e && this.models && this.models.length && Object.keys(e).map(function (t) {\n            s.models.map(function (n) {\n              t !== n || /datasource/i.test(t) || (s.isVue3 ? s.ej2Instances.vueInstance.$emit(\"update:\" + t, e[t]) : (s.$emit(\"update:\" + t, e[t]), s.$emit(\"modelchanged\", e[t])));\n            });\n          });\n        },\n        custom: function () {\n          this.updated();\n        },\n        addItem: function (e, t) {\n          return this.ej2Instances.addItem(e, t);\n        },\n        getDataByValue: function (e) {\n          return this.ej2Instances.getDataByValue(e);\n        },\n        getItems: function () {\n          return this.ej2Instances.getItems();\n        },\n        hidePopup: function (e) {\n          return this.ej2Instances.hidePopup(e);\n        },\n        search: function (e, t, s) {\n          return this.ej2Instances.search(e, t, s);\n        },\n        showPopup: function () {\n          return this.ej2Instances.showPopup();\n        }\n      }\n    }),\n    _e = {\n      name: \"ejs-mention\",\n      install: function (e) {\n        e.component(_e.name, be);\n      }\n    };\n  e.DropDownListComponent = p, e.DropDownListPlugin = m, e.ComboBoxComponent = P, e.ComboBoxPlugin = b, e.AutoCompleteComponent = L, e.AutoCompletePlugin = E, e.MultiSelectComponent = K, e.MultiSelectPlugin = W, e.ListBoxComponent = ne, e.ListBoxPlugin = ie, e.DropDownTreeComponent = me, e.DropDownTreePlugin = ge, e.MentionComponent = be, e.MentionPlugin = _e, Object.keys(t).forEach(function (s) {\n    e[s] = t[s];\n  }), Object.defineProperty(e, \"__esModule\", {\n    value: !0\n  });\n});","map":{"version":3,"names":[],"sources":["../src/drop-down-list/dropdownlist.component.js","../src/combo-box/combobox.component.js","../src/auto-complete/autocomplete.component.js","../src/multi-select/multiselect.component.js","../src/list-box/listbox.component.js","../src/drop-down-tree/dropdowntree.component.js","../src/mention/mention.component.js"],"sourcesContent":["import { ComponentBase, gh, getProps, isExecute, vueDefineComponent } from '@syncfusion/ej2-vue-base';\nimport { isNullOrUndefined, getValue } from '@syncfusion/ej2-base';\nimport { isUndefined } from '@syncfusion/ej2-base';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\nexport var properties = ['isLazyUpdate', 'plugins', 'actionFailureTemplate', 'allowFiltering', 'allowObjectBinding', 'cssClass', 'dataSource', 'enablePersistence', 'enableRtl', 'enableVirtualization', 'enabled', 'fields', 'filterBarPlaceholder', 'filterType', 'floatLabelType', 'footerTemplate', 'groupTemplate', 'headerTemplate', 'htmlAttributes', 'ignoreAccent', 'ignoreCase', 'index', 'itemTemplate', 'locale', 'noRecordsTemplate', 'placeholder', 'popupHeight', 'popupWidth', 'query', 'readonly', 'showClearButton', 'sortOrder', 'text', 'value', 'valueTemplate', 'width', 'zIndex', 'actionBegin', 'actionComplete', 'actionFailure', 'beforeOpen', 'blur', 'change', 'close', 'created', 'dataBound', 'destroyed', 'filtering', 'focus', 'open', 'select'];\nexport var modelProps = ['value'];\nexport var testProp = getProps({ props: properties });\nexport var props = testProp[0], watch = testProp[1], emitProbs = Object.keys(watch);\nemitProbs.push('modelchanged', 'update:modelValue');\nfor (var _i = 0, modelProps_1 = modelProps; _i < modelProps_1.length; _i++) {\n    var props_1 = modelProps_1[_i];\n    emitProbs.push('update:' + props_1);\n}\n/**\n * DropDownList contains a list of predefined values from which the user can choose\n * ```html\n * <ejs-dropdownlist :dataSource='data'></ejs-dropdownlist>\n * ```\n */\nexport var DropDownListComponent = vueDefineComponent({\n    name: 'DropDownListComponent',\n    mixins: [ComponentBase],\n    props: props,\n    watch: watch,\n    emits: emitProbs,\n    model: { event: 'modelchanged' },\n    provide: function () { return { custom: this.custom }; },\n    data: function () {\n        return {\n            ej2Instances: new DropDownList({}),\n            propKeys: properties,\n            models: modelProps,\n            hasChildDirective: false,\n            hasInjectedModules: true,\n            tagMapper: {},\n            tagNameMapper: {},\n            isVue3: !isExecute,\n            templateCollection: {},\n        };\n    },\n    created: function () {\n        this.ej2Instances._trigger = this.ej2Instances.trigger;\n        this.ej2Instances.trigger = this.trigger;\n        this.bindProperties();\n        this.ej2Instances._setProperties = this.ej2Instances.setProperties;\n        this.ej2Instances.setProperties = this.setProperties;\n        this.ej2Instances.clearTemplate = this.clearTemplate;\n        this.updated = this.updated;\n    },\n    render: function (createElement) {\n        var h = !isExecute ? gh : createElement;\n        var slots = null;\n        if (!isNullOrUndefined(this.$slots.default)) {\n            slots = !isExecute ? this.$slots.default() : this.$slots.default;\n        }\n        return h('input', slots);\n    },\n    methods: {\n        clearTemplate: function (templateNames) {\n            if (!templateNames) {\n                templateNames = Object.keys(this.templateCollection || {});\n            }\n            if (templateNames.length && this.templateCollection) {\n                for (var _i = 0, templateNames_1 = templateNames; _i < templateNames_1.length; _i++) {\n                    var tempName = templateNames_1[_i];\n                    var elementCollection = this.templateCollection[tempName];\n                    if (elementCollection && elementCollection.length) {\n                        for (var _a = 0, elementCollection_1 = elementCollection; _a < elementCollection_1.length; _a++) {\n                            var ele = elementCollection_1[_a];\n                            var destroy = getValue('__vue__.$destroy', ele);\n                            if (destroy) {\n                                ele.__vue__.$destroy();\n                            }\n                            if (ele.innerHTML) {\n                                ele.innerHTML = '';\n                            }\n                        }\n                        delete this.templateCollection[tempName];\n                    }\n                }\n            }\n        },\n        setProperties: function (prop, muteOnChange) {\n            var _this = this;\n            if (this.isVue3) {\n                this.models = !this.models ? this.ej2Instances.referModels : this.models;\n            }\n            if (this.ej2Instances && this.ej2Instances._setProperties) {\n                this.ej2Instances._setProperties(prop, muteOnChange);\n            }\n            if (prop && this.models && this.models.length) {\n                Object.keys(prop).map(function (key) {\n                    _this.models.map(function (model) {\n                        if ((key === model) && !(/datasource/i.test(key))) {\n                            if (_this.isVue3) {\n                                _this.ej2Instances.vueInstance.$emit('update:' + key, prop[key]);\n                            }\n                            else {\n                                _this.$emit('update:' + key, prop[key]);\n                                _this.$emit('modelchanged', prop[key]);\n                            }\n                        }\n                    });\n                });\n            }\n        },\n        trigger: function (eventName, eventProp, successHandler) {\n            if (!isExecute) {\n                this.models = !this.models ? this.ej2Instances.referModels : this.models;\n            }\n            if ((eventName === 'change' || eventName === 'input') && this.models && (this.models.length !== 0)) {\n                var key = this.models.toString().match(/checked|value/) || [];\n                var propKey = key[0];\n                if (eventProp && key && !isUndefined(eventProp[propKey])) {\n                    if (!isExecute) {\n                        this.ej2Instances.vueInstance.$emit('update:' + propKey, eventProp[propKey]);\n                        this.ej2Instances.vueInstance.$emit('modelchanged', eventProp[propKey]);\n                        this.ej2Instances.vueInstance.$emit('update:modelValue', eventProp[propKey]);\n                    }\n                    else {\n                        if (eventName === 'change' || (this.$props && !this.$props.isLazyUpdate)) {\n                            this.$emit('update:' + propKey, eventProp[propKey]);\n                            this.$emit('modelchanged', eventProp[propKey]);\n                        }\n                    }\n                }\n            }\n            else if ((eventName === 'actionBegin' && eventProp.requestType === 'dateNavigate') && this.models && (this.models.length !== 0)) {\n                var key = this.models.toString().match(/currentView|selectedDate/) || [];\n                var propKey = key[0];\n                if (eventProp && key && !isUndefined(eventProp[propKey])) {\n                    if (!isExecute) {\n                        this.ej2Instances.vueInstance.$emit('update:' + propKey, eventProp[propKey]);\n                        this.ej2Instances.vueInstance.$emit('modelchanged', eventProp[propKey]);\n                    }\n                    else {\n                        this.$emit('update:' + propKey, eventProp[propKey]);\n                        this.$emit('modelchanged', eventProp[propKey]);\n                    }\n                }\n            }\n            if ((this.ej2Instances && this.ej2Instances._trigger)) {\n                this.ej2Instances._trigger(eventName, eventProp, successHandler);\n            }\n        },\n        custom: function () {\n            this.updated();\n        },\n        addItem: function (items, itemIndex) {\n            return this.ej2Instances.addItem(items, itemIndex);\n        },\n        clear: function () {\n            return this.ej2Instances.clear();\n        },\n        filter: function (dataSource, query, fields) {\n            return this.ej2Instances.filter(dataSource, query, fields);\n        },\n        focusIn: function (e) {\n            return this.ej2Instances.focusIn(e);\n        },\n        focusOut: function (e) {\n            return this.ej2Instances.focusOut(e);\n        },\n        getDataByValue: function (value) {\n            return this.ej2Instances.getDataByValue(value);\n        },\n        getItems: function () {\n            return this.ej2Instances.getItems();\n        },\n        hidePopup: function (e) {\n            return this.ej2Instances.hidePopup(e);\n        },\n        hideSpinner: function () {\n            return this.ej2Instances.hideSpinner();\n        },\n        requiredModules: function () {\n            return this.ej2Instances.requiredModules();\n        },\n        showPopup: function (e) {\n            return this.ej2Instances.showPopup(e);\n        },\n        showSpinner: function () {\n            return this.ej2Instances.showSpinner();\n        },\n    }\n});\nexport var DropDownListPlugin = {\n    name: 'ejs-dropdownlist',\n    install: function (Vue) {\n        Vue.component(DropDownListPlugin.name, DropDownListComponent);\n    }\n};\n","import { ComponentBase, gh, getProps, isExecute, vueDefineComponent } from '@syncfusion/ej2-vue-base';\nimport { isNullOrUndefined, getValue } from '@syncfusion/ej2-base';\nimport { isUndefined } from '@syncfusion/ej2-base';\nimport { ComboBox } from '@syncfusion/ej2-dropdowns';\nexport var properties = ['isLazyUpdate', 'plugins', 'actionFailureTemplate', 'allowCustom', 'allowFiltering', 'allowObjectBinding', 'autofill', 'cssClass', 'dataSource', 'enablePersistence', 'enableRtl', 'enableVirtualization', 'enabled', 'fields', 'filterBarPlaceholder', 'filterType', 'floatLabelType', 'footerTemplate', 'groupTemplate', 'headerTemplate', 'htmlAttributes', 'ignoreAccent', 'ignoreCase', 'index', 'itemTemplate', 'locale', 'noRecordsTemplate', 'placeholder', 'popupHeight', 'popupWidth', 'query', 'readonly', 'showClearButton', 'sortOrder', 'text', 'value', 'valueTemplate', 'width', 'zIndex', 'actionBegin', 'actionComplete', 'actionFailure', 'beforeOpen', 'blur', 'change', 'close', 'created', 'customValueSpecifier', 'dataBound', 'destroyed', 'filtering', 'focus', 'open', 'select'];\nexport var modelProps = ['value'];\nexport var testProp = getProps({ props: properties });\nexport var props = testProp[0], watch = testProp[1], emitProbs = Object.keys(watch);\nemitProbs.push('modelchanged', 'update:modelValue');\nfor (var _i = 0, modelProps_1 = modelProps; _i < modelProps_1.length; _i++) {\n    var props_1 = modelProps_1[_i];\n    emitProbs.push('update:' + props_1);\n}\n/**\n * ComboBox component allows the user to type a value or choose an option from the list of predefined options available\n * ```html\n * <ejs-combobox :dataSource='data'></ejs-combobox>\n * ```\n */\nexport var ComboBoxComponent = vueDefineComponent({\n    name: 'ComboBoxComponent',\n    mixins: [ComponentBase],\n    props: props,\n    watch: watch,\n    emits: emitProbs,\n    model: { event: 'modelchanged' },\n    provide: function () { return { custom: this.custom }; },\n    data: function () {\n        return {\n            ej2Instances: new ComboBox({}),\n            propKeys: properties,\n            models: modelProps,\n            hasChildDirective: false,\n            hasInjectedModules: true,\n            tagMapper: {},\n            tagNameMapper: {},\n            isVue3: !isExecute,\n            templateCollection: {},\n        };\n    },\n    created: function () {\n        this.ej2Instances._trigger = this.ej2Instances.trigger;\n        this.ej2Instances.trigger = this.trigger;\n        this.bindProperties();\n        this.ej2Instances._setProperties = this.ej2Instances.setProperties;\n        this.ej2Instances.setProperties = this.setProperties;\n        this.ej2Instances.clearTemplate = this.clearTemplate;\n        this.updated = this.updated;\n    },\n    render: function (createElement) {\n        var h = !isExecute ? gh : createElement;\n        var slots = null;\n        if (!isNullOrUndefined(this.$slots.default)) {\n            slots = !isExecute ? this.$slots.default() : this.$slots.default;\n        }\n        return h('input', slots);\n    },\n    methods: {\n        clearTemplate: function (templateNames) {\n            if (!templateNames) {\n                templateNames = Object.keys(this.templateCollection || {});\n            }\n            if (templateNames.length && this.templateCollection) {\n                for (var _i = 0, templateNames_1 = templateNames; _i < templateNames_1.length; _i++) {\n                    var tempName = templateNames_1[_i];\n                    var elementCollection = this.templateCollection[tempName];\n                    if (elementCollection && elementCollection.length) {\n                        for (var _a = 0, elementCollection_1 = elementCollection; _a < elementCollection_1.length; _a++) {\n                            var ele = elementCollection_1[_a];\n                            var destroy = getValue('__vue__.$destroy', ele);\n                            if (destroy) {\n                                ele.__vue__.$destroy();\n                            }\n                            if (ele.innerHTML) {\n                                ele.innerHTML = '';\n                            }\n                        }\n                        delete this.templateCollection[tempName];\n                    }\n                }\n            }\n        },\n        setProperties: function (prop, muteOnChange) {\n            var _this = this;\n            if (this.isVue3) {\n                this.models = !this.models ? this.ej2Instances.referModels : this.models;\n            }\n            if (this.ej2Instances && this.ej2Instances._setProperties) {\n                this.ej2Instances._setProperties(prop, muteOnChange);\n            }\n            if (prop && this.models && this.models.length) {\n                Object.keys(prop).map(function (key) {\n                    _this.models.map(function (model) {\n                        if ((key === model) && !(/datasource/i.test(key))) {\n                            if (_this.isVue3) {\n                                _this.ej2Instances.vueInstance.$emit('update:' + key, prop[key]);\n                            }\n                            else {\n                                _this.$emit('update:' + key, prop[key]);\n                                _this.$emit('modelchanged', prop[key]);\n                            }\n                        }\n                    });\n                });\n            }\n        },\n        trigger: function (eventName, eventProp, successHandler) {\n            if (!isExecute) {\n                this.models = !this.models ? this.ej2Instances.referModels : this.models;\n            }\n            if ((eventName === 'change' || eventName === 'input') && this.models && (this.models.length !== 0)) {\n                var key = this.models.toString().match(/checked|value/) || [];\n                var propKey = key[0];\n                if (eventProp && key && !isUndefined(eventProp[propKey])) {\n                    if (!isExecute) {\n                        this.ej2Instances.vueInstance.$emit('update:' + propKey, eventProp[propKey]);\n                        this.ej2Instances.vueInstance.$emit('modelchanged', eventProp[propKey]);\n                        this.ej2Instances.vueInstance.$emit('update:modelValue', eventProp[propKey]);\n                    }\n                    else {\n                        if (eventName === 'change' || (this.$props && !this.$props.isLazyUpdate)) {\n                            this.$emit('update:' + propKey, eventProp[propKey]);\n                            this.$emit('modelchanged', eventProp[propKey]);\n                        }\n                    }\n                }\n            }\n            else if ((eventName === 'actionBegin' && eventProp.requestType === 'dateNavigate') && this.models && (this.models.length !== 0)) {\n                var key = this.models.toString().match(/currentView|selectedDate/) || [];\n                var propKey = key[0];\n                if (eventProp && key && !isUndefined(eventProp[propKey])) {\n                    if (!isExecute) {\n                        this.ej2Instances.vueInstance.$emit('update:' + propKey, eventProp[propKey]);\n                        this.ej2Instances.vueInstance.$emit('modelchanged', eventProp[propKey]);\n                    }\n                    else {\n                        this.$emit('update:' + propKey, eventProp[propKey]);\n                        this.$emit('modelchanged', eventProp[propKey]);\n                    }\n                }\n            }\n            if ((this.ej2Instances && this.ej2Instances._trigger)) {\n                this.ej2Instances._trigger(eventName, eventProp, successHandler);\n            }\n        },\n        custom: function () {\n            this.updated();\n        },\n        addItem: function (items, itemIndex) {\n            return this.ej2Instances.addItem(items, itemIndex);\n        },\n        clear: function () {\n            return this.ej2Instances.clear();\n        },\n        filter: function (dataSource, query, fields) {\n            return this.ej2Instances.filter(dataSource, query, fields);\n        },\n        focusIn: function () {\n            return this.ej2Instances.focusIn();\n        },\n        focusOut: function (e) {\n            return this.ej2Instances.focusOut(e);\n        },\n        getDataByValue: function (value) {\n            return this.ej2Instances.getDataByValue(value);\n        },\n        getItems: function () {\n            return this.ej2Instances.getItems();\n        },\n        hidePopup: function (e) {\n            return this.ej2Instances.hidePopup(e);\n        },\n        hideSpinner: function () {\n            return this.ej2Instances.hideSpinner();\n        },\n        requiredModules: function () {\n            return this.ej2Instances.requiredModules();\n        },\n        showPopup: function (e) {\n            return this.ej2Instances.showPopup(e);\n        },\n        showSpinner: function () {\n            return this.ej2Instances.showSpinner();\n        },\n    }\n});\nexport var ComboBoxPlugin = {\n    name: 'ejs-combobox',\n    install: function (Vue) {\n        Vue.component(ComboBoxPlugin.name, ComboBoxComponent);\n    }\n};\n","import { ComponentBase, gh, getProps, isExecute, vueDefineComponent } from '@syncfusion/ej2-vue-base';\nimport { isNullOrUndefined, getValue } from '@syncfusion/ej2-base';\nimport { isUndefined } from '@syncfusion/ej2-base';\nimport { AutoComplete } from '@syncfusion/ej2-dropdowns';\nexport var properties = ['isLazyUpdate', 'plugins', 'actionFailureTemplate', 'allowCustom', 'allowFiltering', 'allowObjectBinding', 'autofill', 'cssClass', 'dataSource', 'enablePersistence', 'enableRtl', 'enableVirtualization', 'enabled', 'fields', 'filterBarPlaceholder', 'filterType', 'floatLabelType', 'footerTemplate', 'groupTemplate', 'headerTemplate', 'highlight', 'htmlAttributes', 'ignoreAccent', 'ignoreCase', 'index', 'itemTemplate', 'locale', 'minLength', 'noRecordsTemplate', 'placeholder', 'popupHeight', 'popupWidth', 'query', 'readonly', 'showClearButton', 'showPopupButton', 'sortOrder', 'suggestionCount', 'text', 'value', 'valueTemplate', 'width', 'zIndex', 'actionBegin', 'actionComplete', 'actionFailure', 'beforeOpen', 'blur', 'change', 'close', 'created', 'customValueSpecifier', 'dataBound', 'destroyed', 'filtering', 'focus', 'open', 'select'];\nexport var modelProps = ['value'];\nexport var testProp = getProps({ props: properties });\nexport var props = testProp[0], watch = testProp[1], emitProbs = Object.keys(watch);\nemitProbs.push('modelchanged', 'update:modelValue');\nfor (var _i = 0, modelProps_1 = modelProps; _i < modelProps_1.length; _i++) {\n    var props_1 = modelProps_1[_i];\n    emitProbs.push('update:' + props_1);\n}\n/**\n * The AutoComplete component provides all the matched suggestion list on typing the input from which the user can select one.\n * ```html\n * <ejs-autocomplete :dataSource='data'></ejs-autocomplete>\n * ```\n */\nexport var AutoCompleteComponent = vueDefineComponent({\n    name: 'AutoCompleteComponent',\n    mixins: [ComponentBase],\n    props: props,\n    watch: watch,\n    emits: emitProbs,\n    model: { event: 'modelchanged' },\n    provide: function () { return { custom: this.custom }; },\n    data: function () {\n        return {\n            ej2Instances: new AutoComplete({}),\n            propKeys: properties,\n            models: modelProps,\n            hasChildDirective: false,\n            hasInjectedModules: true,\n            tagMapper: {},\n            tagNameMapper: {},\n            isVue3: !isExecute,\n            templateCollection: {},\n        };\n    },\n    created: function () {\n        this.ej2Instances._trigger = this.ej2Instances.trigger;\n        this.ej2Instances.trigger = this.trigger;\n        this.bindProperties();\n        this.ej2Instances._setProperties = this.ej2Instances.setProperties;\n        this.ej2Instances.setProperties = this.setProperties;\n        this.ej2Instances.clearTemplate = this.clearTemplate;\n        this.updated = this.updated;\n    },\n    render: function (createElement) {\n        var h = !isExecute ? gh : createElement;\n        var slots = null;\n        if (!isNullOrUndefined(this.$slots.default)) {\n            slots = !isExecute ? this.$slots.default() : this.$slots.default;\n        }\n        return h('input', slots);\n    },\n    methods: {\n        clearTemplate: function (templateNames) {\n            if (!templateNames) {\n                templateNames = Object.keys(this.templateCollection || {});\n            }\n            if (templateNames.length && this.templateCollection) {\n                for (var _i = 0, templateNames_1 = templateNames; _i < templateNames_1.length; _i++) {\n                    var tempName = templateNames_1[_i];\n                    var elementCollection = this.templateCollection[tempName];\n                    if (elementCollection && elementCollection.length) {\n                        for (var _a = 0, elementCollection_1 = elementCollection; _a < elementCollection_1.length; _a++) {\n                            var ele = elementCollection_1[_a];\n                            var destroy = getValue('__vue__.$destroy', ele);\n                            if (destroy) {\n                                ele.__vue__.$destroy();\n                            }\n                            if (ele.innerHTML) {\n                                ele.innerHTML = '';\n                            }\n                        }\n                        delete this.templateCollection[tempName];\n                    }\n                }\n            }\n        },\n        setProperties: function (prop, muteOnChange) {\n            var _this = this;\n            if (this.isVue3) {\n                this.models = !this.models ? this.ej2Instances.referModels : this.models;\n            }\n            if (this.ej2Instances && this.ej2Instances._setProperties) {\n                this.ej2Instances._setProperties(prop, muteOnChange);\n            }\n            if (prop && this.models && this.models.length) {\n                Object.keys(prop).map(function (key) {\n                    _this.models.map(function (model) {\n                        if ((key === model) && !(/datasource/i.test(key))) {\n                            if (_this.isVue3) {\n                                _this.ej2Instances.vueInstance.$emit('update:' + key, prop[key]);\n                            }\n                            else {\n                                _this.$emit('update:' + key, prop[key]);\n                                _this.$emit('modelchanged', prop[key]);\n                            }\n                        }\n                    });\n                });\n            }\n        },\n        trigger: function (eventName, eventProp, successHandler) {\n            if (!isExecute) {\n                this.models = !this.models ? this.ej2Instances.referModels : this.models;\n            }\n            if ((eventName === 'change' || eventName === 'input') && this.models && (this.models.length !== 0)) {\n                var key = this.models.toString().match(/checked|value/) || [];\n                var propKey = key[0];\n                if (eventProp && key && !isUndefined(eventProp[propKey])) {\n                    if (!isExecute) {\n                        this.ej2Instances.vueInstance.$emit('update:' + propKey, eventProp[propKey]);\n                        this.ej2Instances.vueInstance.$emit('modelchanged', eventProp[propKey]);\n                        this.ej2Instances.vueInstance.$emit('update:modelValue', eventProp[propKey]);\n                    }\n                    else {\n                        if (eventName === 'change' || (this.$props && !this.$props.isLazyUpdate)) {\n                            this.$emit('update:' + propKey, eventProp[propKey]);\n                            this.$emit('modelchanged', eventProp[propKey]);\n                        }\n                    }\n                }\n            }\n            else if ((eventName === 'actionBegin' && eventProp.requestType === 'dateNavigate') && this.models && (this.models.length !== 0)) {\n                var key = this.models.toString().match(/currentView|selectedDate/) || [];\n                var propKey = key[0];\n                if (eventProp && key && !isUndefined(eventProp[propKey])) {\n                    if (!isExecute) {\n                        this.ej2Instances.vueInstance.$emit('update:' + propKey, eventProp[propKey]);\n                        this.ej2Instances.vueInstance.$emit('modelchanged', eventProp[propKey]);\n                    }\n                    else {\n                        this.$emit('update:' + propKey, eventProp[propKey]);\n                        this.$emit('modelchanged', eventProp[propKey]);\n                    }\n                }\n            }\n            if ((this.ej2Instances && this.ej2Instances._trigger)) {\n                this.ej2Instances._trigger(eventName, eventProp, successHandler);\n            }\n        },\n        custom: function () {\n            this.updated();\n        },\n        addItem: function (items, itemIndex) {\n            return this.ej2Instances.addItem(items, itemIndex);\n        },\n        clear: function () {\n            return this.ej2Instances.clear();\n        },\n        filter: function (dataSource, query, fields) {\n            return this.ej2Instances.filter(dataSource, query, fields);\n        },\n        focusIn: function () {\n            return this.ej2Instances.focusIn();\n        },\n        focusOut: function (e) {\n            return this.ej2Instances.focusOut(e);\n        },\n        getDataByValue: function (value) {\n            return this.ej2Instances.getDataByValue(value);\n        },\n        getItems: function () {\n            return this.ej2Instances.getItems();\n        },\n        hidePopup: function (e) {\n            return this.ej2Instances.hidePopup(e);\n        },\n        hideSpinner: function () {\n            return this.ej2Instances.hideSpinner();\n        },\n        requiredModules: function () {\n            return this.ej2Instances.requiredModules();\n        },\n        showPopup: function (e) {\n            return this.ej2Instances.showPopup(e);\n        },\n        showSpinner: function () {\n            return this.ej2Instances.showSpinner();\n        },\n    }\n});\nexport var AutoCompletePlugin = {\n    name: 'ejs-autocomplete',\n    install: function (Vue) {\n        Vue.component(AutoCompletePlugin.name, AutoCompleteComponent);\n    }\n};\n","import { ComponentBase, gh, getProps, isExecute, vueDefineComponent } from '@syncfusion/ej2-vue-base';\nimport { isNullOrUndefined, getValue } from '@syncfusion/ej2-base';\nimport { isUndefined } from '@syncfusion/ej2-base';\nimport { MultiSelect } from '@syncfusion/ej2-dropdowns';\nexport var properties = ['isLazyUpdate', 'plugins', 'actionFailureTemplate', 'addTagOnBlur', 'allowCustomValue', 'allowFiltering', 'allowObjectBinding', 'changeOnBlur', 'closePopupOnSelect', 'cssClass', 'dataSource', 'delimiterChar', 'enableGroupCheckBox', 'enableHtmlSanitizer', 'enablePersistence', 'enableRtl', 'enableSelectionOrder', 'enableVirtualization', 'enabled', 'fields', 'filterBarPlaceholder', 'filterType', 'floatLabelType', 'footerTemplate', 'groupTemplate', 'headerTemplate', 'hideSelectedItem', 'htmlAttributes', 'ignoreAccent', 'ignoreCase', 'itemTemplate', 'locale', 'maximumSelectionLength', 'mode', 'noRecordsTemplate', 'openOnClick', 'placeholder', 'popupHeight', 'popupWidth', 'query', 'readonly', 'selectAllText', 'showClearButton', 'showDropDownIcon', 'showSelectAll', 'sortOrder', 'text', 'unSelectAllText', 'value', 'valueTemplate', 'width', 'zIndex', 'actionBegin', 'actionComplete', 'actionFailure', 'beforeOpen', 'beforeSelectAll', 'blur', 'change', 'chipSelection', 'close', 'created', 'customValueSelection', 'dataBound', 'destroyed', 'filtering', 'focus', 'open', 'removed', 'removing', 'select', 'selectedAll', 'tagging'];\nexport var modelProps = ['value'];\nexport var testProp = getProps({ props: properties });\nexport var props = testProp[0], watch = testProp[1], emitProbs = Object.keys(watch);\nemitProbs.push('modelchanged', 'update:modelValue');\nfor (var _i = 0, modelProps_1 = modelProps; _i < modelProps_1.length; _i++) {\n    var props_1 = modelProps_1[_i];\n    emitProbs.push('update:' + props_1);\n}\n/**\n * MultiSelect component allows the user to select a value from the predefined list of values.\n * ```html\n * <ejs-multiselect :dataSource='data'></ejs-multiselect>\n * ```\n */\nexport var MultiSelectComponent = vueDefineComponent({\n    name: 'MultiSelectComponent',\n    mixins: [ComponentBase],\n    props: props,\n    watch: watch,\n    emits: emitProbs,\n    model: { event: 'modelchanged' },\n    provide: function () { return { custom: this.custom }; },\n    data: function () {\n        return {\n            ej2Instances: new MultiSelect({}),\n            propKeys: properties,\n            models: modelProps,\n            hasChildDirective: false,\n            hasInjectedModules: true,\n            tagMapper: {},\n            tagNameMapper: {},\n            isVue3: !isExecute,\n            templateCollection: {},\n        };\n    },\n    created: function () {\n        this.ej2Instances._trigger = this.ej2Instances.trigger;\n        this.ej2Instances.trigger = this.trigger;\n        this.bindProperties();\n        this.ej2Instances._setProperties = this.ej2Instances.setProperties;\n        this.ej2Instances.setProperties = this.setProperties;\n        this.ej2Instances.clearTemplate = this.clearTemplate;\n        this.updated = this.updated;\n    },\n    render: function (createElement) {\n        var h = !isExecute ? gh : createElement;\n        var slots = null;\n        if (!isNullOrUndefined(this.$slots.default)) {\n            slots = !isExecute ? this.$slots.default() : this.$slots.default;\n        }\n        return h('input', slots);\n    },\n    methods: {\n        clearTemplate: function (templateNames) {\n            if (!templateNames) {\n                templateNames = Object.keys(this.templateCollection || {});\n            }\n            if (templateNames.length && this.templateCollection) {\n                for (var _i = 0, templateNames_1 = templateNames; _i < templateNames_1.length; _i++) {\n                    var tempName = templateNames_1[_i];\n                    var elementCollection = this.templateCollection[tempName];\n                    if (elementCollection && elementCollection.length) {\n                        for (var _a = 0, elementCollection_1 = elementCollection; _a < elementCollection_1.length; _a++) {\n                            var ele = elementCollection_1[_a];\n                            var destroy = getValue('__vue__.$destroy', ele);\n                            if (destroy) {\n                                ele.__vue__.$destroy();\n                            }\n                            if (ele.innerHTML) {\n                                ele.innerHTML = '';\n                            }\n                        }\n                        delete this.templateCollection[tempName];\n                    }\n                }\n            }\n        },\n        setProperties: function (prop, muteOnChange) {\n            var _this = this;\n            if (this.isVue3) {\n                this.models = !this.models ? this.ej2Instances.referModels : this.models;\n            }\n            if (this.ej2Instances && this.ej2Instances._setProperties) {\n                this.ej2Instances._setProperties(prop, muteOnChange);\n            }\n            if (prop && this.models && this.models.length) {\n                Object.keys(prop).map(function (key) {\n                    _this.models.map(function (model) {\n                        if ((key === model) && !(/datasource/i.test(key))) {\n                            if (_this.isVue3) {\n                                _this.ej2Instances.vueInstance.$emit('update:' + key, prop[key]);\n                            }\n                            else {\n                                _this.$emit('update:' + key, prop[key]);\n                                _this.$emit('modelchanged', prop[key]);\n                            }\n                        }\n                    });\n                });\n            }\n        },\n        trigger: function (eventName, eventProp, successHandler) {\n            if (!isExecute) {\n                this.models = !this.models ? this.ej2Instances.referModels : this.models;\n            }\n            if ((eventName === 'change' || eventName === 'input') && this.models && (this.models.length !== 0)) {\n                var key = this.models.toString().match(/checked|value/) || [];\n                var propKey = key[0];\n                if (eventProp && key && !isUndefined(eventProp[propKey])) {\n                    if (!isExecute) {\n                        this.ej2Instances.vueInstance.$emit('update:' + propKey, eventProp[propKey]);\n                        this.ej2Instances.vueInstance.$emit('modelchanged', eventProp[propKey]);\n                        this.ej2Instances.vueInstance.$emit('update:modelValue', eventProp[propKey]);\n                    }\n                    else {\n                        if (eventName === 'change' || (this.$props && !this.$props.isLazyUpdate)) {\n                            this.$emit('update:' + propKey, eventProp[propKey]);\n                            this.$emit('modelchanged', eventProp[propKey]);\n                        }\n                    }\n                }\n            }\n            else if ((eventName === 'actionBegin' && eventProp.requestType === 'dateNavigate') && this.models && (this.models.length !== 0)) {\n                var key = this.models.toString().match(/currentView|selectedDate/) || [];\n                var propKey = key[0];\n                if (eventProp && key && !isUndefined(eventProp[propKey])) {\n                    if (!isExecute) {\n                        this.ej2Instances.vueInstance.$emit('update:' + propKey, eventProp[propKey]);\n                        this.ej2Instances.vueInstance.$emit('modelchanged', eventProp[propKey]);\n                    }\n                    else {\n                        this.$emit('update:' + propKey, eventProp[propKey]);\n                        this.$emit('modelchanged', eventProp[propKey]);\n                    }\n                }\n            }\n            if ((this.ej2Instances && this.ej2Instances._trigger)) {\n                this.ej2Instances._trigger(eventName, eventProp, successHandler);\n            }\n        },\n        custom: function () {\n            this.updated();\n        },\n        addItem: function (items, itemIndex) {\n            return this.ej2Instances.addItem(items, itemIndex);\n        },\n        clear: function () {\n            return this.ej2Instances.clear();\n        },\n        filter: function (dataSource, query, fields) {\n            return this.ej2Instances.filter(dataSource, query, fields);\n        },\n        focusIn: function () {\n            return this.ej2Instances.focusIn();\n        },\n        focusOut: function () {\n            return this.ej2Instances.focusOut();\n        },\n        getDataByValue: function (value) {\n            return this.ej2Instances.getDataByValue(value);\n        },\n        getItems: function () {\n            return this.ej2Instances.getItems();\n        },\n        hidePopup: function (e) {\n            return this.ej2Instances.hidePopup(e);\n        },\n        hideSpinner: function () {\n            return this.ej2Instances.hideSpinner();\n        },\n        requiredModules: function () {\n            return this.ej2Instances.requiredModules();\n        },\n        selectAll: function (state) {\n            return this.ej2Instances.selectAll(state);\n        },\n        showPopup: function (e) {\n            return this.ej2Instances.showPopup(e);\n        },\n        showSpinner: function () {\n            return this.ej2Instances.showSpinner();\n        },\n    }\n});\nexport var MultiSelectPlugin = {\n    name: 'ejs-multiselect',\n    install: function (Vue) {\n        Vue.component(MultiSelectPlugin.name, MultiSelectComponent);\n    }\n};\n","import { ComponentBase, gh, getProps, isExecute, vueDefineComponent } from '@syncfusion/ej2-vue-base';\nimport { isNullOrUndefined, getValue } from '@syncfusion/ej2-base';\nimport { isUndefined } from '@syncfusion/ej2-base';\nimport { ListBox } from '@syncfusion/ej2-dropdowns';\nexport var properties = ['isLazyUpdate', 'plugins', 'actionFailureTemplate', 'allowDragAndDrop', 'allowFiltering', 'cssClass', 'dataSource', 'enablePersistence', 'enableRtl', 'enabled', 'fields', 'filterBarPlaceholder', 'filterType', 'groupTemplate', 'height', 'ignoreAccent', 'ignoreCase', 'itemTemplate', 'locale', 'maximumSelectionLength', 'noRecordsTemplate', 'query', 'scope', 'selectionSettings', 'sortOrder', 'toolbarSettings', 'value', 'zIndex', 'actionBegin', 'actionComplete', 'actionFailure', 'beforeDrop', 'beforeItemRender', 'change', 'created', 'dataBound', 'destroyed', 'drag', 'dragStart', 'drop', 'filtering', 'select'];\nexport var modelProps = ['value'];\nexport var testProp = getProps({ props: properties });\nexport var props = testProp[0], watch = testProp[1], emitProbs = Object.keys(watch);\nemitProbs.push('modelchanged', 'update:modelValue');\nfor (var _i = 0, modelProps_1 = modelProps; _i < modelProps_1.length; _i++) {\n    var props_1 = modelProps_1[_i];\n    emitProbs.push('update:' + props_1);\n}\n/**\n * ListBox component allows the user to select values from the predefined list of values.\n * ```html\n * <ejs-listbox :dataSource='data'></ejs-listbox>\n * ```\n */\nexport var ListBoxComponent = vueDefineComponent({\n    name: 'ListBoxComponent',\n    mixins: [ComponentBase],\n    props: props,\n    watch: watch,\n    emits: emitProbs,\n    model: { event: 'modelchanged' },\n    provide: function () { return { custom: this.custom }; },\n    data: function () {\n        return {\n            ej2Instances: new ListBox({}),\n            propKeys: properties,\n            models: modelProps,\n            hasChildDirective: false,\n            hasInjectedModules: true,\n            tagMapper: {},\n            tagNameMapper: {},\n            isVue3: !isExecute,\n            templateCollection: {},\n        };\n    },\n    created: function () {\n        this.ej2Instances._trigger = this.ej2Instances.trigger;\n        this.ej2Instances.trigger = this.trigger;\n        this.bindProperties();\n        this.ej2Instances._setProperties = this.ej2Instances.setProperties;\n        this.ej2Instances.setProperties = this.setProperties;\n        this.ej2Instances.clearTemplate = this.clearTemplate;\n        this.updated = this.updated;\n    },\n    render: function (createElement) {\n        var h = !isExecute ? gh : createElement;\n        var slots = null;\n        if (!isNullOrUndefined(this.$slots.default)) {\n            slots = !isExecute ? this.$slots.default() : this.$slots.default;\n        }\n        return h('input', slots);\n    },\n    methods: {\n        clearTemplate: function (templateNames) {\n            if (!templateNames) {\n                templateNames = Object.keys(this.templateCollection || {});\n            }\n            if (templateNames.length && this.templateCollection) {\n                for (var _i = 0, templateNames_1 = templateNames; _i < templateNames_1.length; _i++) {\n                    var tempName = templateNames_1[_i];\n                    var elementCollection = this.templateCollection[tempName];\n                    if (elementCollection && elementCollection.length) {\n                        for (var _a = 0, elementCollection_1 = elementCollection; _a < elementCollection_1.length; _a++) {\n                            var ele = elementCollection_1[_a];\n                            var destroy = getValue('__vue__.$destroy', ele);\n                            if (destroy) {\n                                ele.__vue__.$destroy();\n                            }\n                            if (ele.innerHTML) {\n                                ele.innerHTML = '';\n                            }\n                        }\n                        delete this.templateCollection[tempName];\n                    }\n                }\n            }\n        },\n        setProperties: function (prop, muteOnChange) {\n            var _this = this;\n            if (this.isVue3) {\n                this.models = !this.models ? this.ej2Instances.referModels : this.models;\n            }\n            if (this.ej2Instances && this.ej2Instances._setProperties) {\n                this.ej2Instances._setProperties(prop, muteOnChange);\n            }\n            if (prop && this.models && this.models.length) {\n                Object.keys(prop).map(function (key) {\n                    _this.models.map(function (model) {\n                        if ((key === model) && !(/datasource/i.test(key))) {\n                            if (_this.isVue3) {\n                                _this.ej2Instances.vueInstance.$emit('update:' + key, prop[key]);\n                            }\n                            else {\n                                _this.$emit('update:' + key, prop[key]);\n                                _this.$emit('modelchanged', prop[key]);\n                            }\n                        }\n                    });\n                });\n            }\n        },\n        trigger: function (eventName, eventProp, successHandler) {\n            if (!isExecute) {\n                this.models = !this.models ? this.ej2Instances.referModels : this.models;\n            }\n            if ((eventName === 'change' || eventName === 'input') && this.models && (this.models.length !== 0)) {\n                var key = this.models.toString().match(/checked|value/) || [];\n                var propKey = key[0];\n                if (eventProp && key && !isUndefined(eventProp[propKey])) {\n                    if (!isExecute) {\n                        this.ej2Instances.vueInstance.$emit('update:' + propKey, eventProp[propKey]);\n                        this.ej2Instances.vueInstance.$emit('modelchanged', eventProp[propKey]);\n                        this.ej2Instances.vueInstance.$emit('update:modelValue', eventProp[propKey]);\n                    }\n                    else {\n                        if (eventName === 'change' || (this.$props && !this.$props.isLazyUpdate)) {\n                            this.$emit('update:' + propKey, eventProp[propKey]);\n                            this.$emit('modelchanged', eventProp[propKey]);\n                        }\n                    }\n                }\n            }\n            else if ((eventName === 'actionBegin' && eventProp.requestType === 'dateNavigate') && this.models && (this.models.length !== 0)) {\n                var key = this.models.toString().match(/currentView|selectedDate/) || [];\n                var propKey = key[0];\n                if (eventProp && key && !isUndefined(eventProp[propKey])) {\n                    if (!isExecute) {\n                        this.ej2Instances.vueInstance.$emit('update:' + propKey, eventProp[propKey]);\n                        this.ej2Instances.vueInstance.$emit('modelchanged', eventProp[propKey]);\n                    }\n                    else {\n                        this.$emit('update:' + propKey, eventProp[propKey]);\n                        this.$emit('modelchanged', eventProp[propKey]);\n                    }\n                }\n            }\n            if ((this.ej2Instances && this.ej2Instances._trigger)) {\n                this.ej2Instances._trigger(eventName, eventProp, successHandler);\n            }\n        },\n        custom: function () {\n            this.updated();\n        },\n        addItems: function (items, itemIndex) {\n            return this.ej2Instances.addItems(items, itemIndex);\n        },\n        enableItems: function (items, enable, isValue) {\n            return this.ej2Instances.enableItems(items, enable, isValue);\n        },\n        filter: function (dataSource, query, fields) {\n            return this.ej2Instances.filter(dataSource, query, fields);\n        },\n        getDataByValue: function (value) {\n            return this.ej2Instances.getDataByValue(value);\n        },\n        getDataByValues: function (value) {\n            return this.ej2Instances.getDataByValues(value);\n        },\n        getDataList: function () {\n            return this.ej2Instances.getDataList();\n        },\n        getItems: function () {\n            return this.ej2Instances.getItems();\n        },\n        getSortedList: function () {\n            return this.ej2Instances.getSortedList();\n        },\n        hideSpinner: function () {\n            return this.ej2Instances.hideSpinner();\n        },\n        moveAllTo: function (targetId, index) {\n            return this.ej2Instances.moveAllTo(targetId, index);\n        },\n        moveBottom: function (value) {\n            return this.ej2Instances.moveBottom(value);\n        },\n        moveDown: function (value) {\n            return this.ej2Instances.moveDown(value);\n        },\n        moveTo: function (value, index, targetId) {\n            return this.ej2Instances.moveTo(value, index, targetId);\n        },\n        moveTop: function (value) {\n            return this.ej2Instances.moveTop(value);\n        },\n        moveUp: function (value) {\n            return this.ej2Instances.moveUp(value);\n        },\n        removeItem: function (items, itemIndex) {\n            return this.ej2Instances.removeItem(items, itemIndex);\n        },\n        removeItems: function (items, itemIndex) {\n            return this.ej2Instances.removeItems(items, itemIndex);\n        },\n        requiredModules: function () {\n            return this.ej2Instances.requiredModules();\n        },\n        selectAll: function (state) {\n            return this.ej2Instances.selectAll(state);\n        },\n        selectItems: function (items, state, isValue) {\n            return this.ej2Instances.selectItems(items, state, isValue);\n        },\n        showSpinner: function () {\n            return this.ej2Instances.showSpinner();\n        },\n    }\n});\nexport var ListBoxPlugin = {\n    name: 'ejs-listbox',\n    install: function (Vue) {\n        Vue.component(ListBoxPlugin.name, ListBoxComponent);\n    }\n};\n","import { ComponentBase, gh, getProps, isExecute, vueDefineComponent } from '@syncfusion/ej2-vue-base';\nimport { isNullOrUndefined, getValue } from '@syncfusion/ej2-base';\nimport { isUndefined } from '@syncfusion/ej2-base';\nimport { DropDownTree } from '@syncfusion/ej2-dropdowns';\nexport var properties = ['isLazyUpdate', 'plugins', 'actionFailureTemplate', 'allowFiltering', 'allowMultiSelection', 'changeOnBlur', 'cssClass', 'customTemplate', 'delimiterChar', 'destroyPopupOnHide', 'enableHtmlSanitizer', 'enablePersistence', 'enableRtl', 'enabled', 'fields', 'filterBarPlaceholder', 'filterType', 'floatLabelType', 'footerTemplate', 'headerTemplate', 'htmlAttributes', 'ignoreAccent', 'ignoreCase', 'itemTemplate', 'locale', 'mode', 'noRecordsTemplate', 'placeholder', 'popupHeight', 'popupWidth', 'readonly', 'selectAllText', 'showCheckBox', 'showClearButton', 'showDropDownIcon', 'showSelectAll', 'sortOrder', 'text', 'treeSettings', 'unSelectAllText', 'value', 'width', 'wrapText', 'zIndex', 'actionFailure', 'beforeOpen', 'blur', 'change', 'close', 'created', 'dataBound', 'destroyed', 'filtering', 'focus', 'keyPress', 'open', 'select'];\nexport var modelProps = ['value'];\nexport var testProp = getProps({ props: properties });\nexport var props = testProp[0], watch = testProp[1], emitProbs = Object.keys(watch);\nemitProbs.push('modelchanged', 'update:modelValue');\nfor (var _i = 0, modelProps_1 = modelProps; _i < modelProps_1.length; _i++) {\n    var props_1 = modelProps_1[_i];\n    emitProbs.push('update:' + props_1);\n}\n/**\n * The DropDownTree component contains a list of predefined values from which you can choose a single or multiple values.\n * ```html\n * <ejs-dropdowntree></ejs-dropdowntree>\n * ```\n */\nexport var DropDownTreeComponent = vueDefineComponent({\n    name: 'DropDownTreeComponent',\n    mixins: [ComponentBase],\n    props: props,\n    watch: watch,\n    emits: emitProbs,\n    model: { event: 'modelchanged' },\n    provide: function () { return { custom: this.custom }; },\n    data: function () {\n        return {\n            ej2Instances: new DropDownTree({}),\n            propKeys: properties,\n            models: modelProps,\n            hasChildDirective: false,\n            hasInjectedModules: false,\n            tagMapper: {},\n            tagNameMapper: {},\n            isVue3: !isExecute,\n            templateCollection: {},\n        };\n    },\n    created: function () {\n        this.ej2Instances._trigger = this.ej2Instances.trigger;\n        this.ej2Instances.trigger = this.trigger;\n        this.bindProperties();\n        this.ej2Instances._setProperties = this.ej2Instances.setProperties;\n        this.ej2Instances.setProperties = this.setProperties;\n        this.ej2Instances.clearTemplate = this.clearTemplate;\n        this.updated = this.updated;\n    },\n    render: function (createElement) {\n        var h = !isExecute ? gh : createElement;\n        var slots = null;\n        if (!isNullOrUndefined(this.$slots.default)) {\n            slots = !isExecute ? this.$slots.default() : this.$slots.default;\n        }\n        return h('input', slots);\n    },\n    methods: {\n        clearTemplate: function (templateNames) {\n            if (!templateNames) {\n                templateNames = Object.keys(this.templateCollection || {});\n            }\n            if (templateNames.length && this.templateCollection) {\n                for (var _i = 0, templateNames_1 = templateNames; _i < templateNames_1.length; _i++) {\n                    var tempName = templateNames_1[_i];\n                    var elementCollection = this.templateCollection[tempName];\n                    if (elementCollection && elementCollection.length) {\n                        for (var _a = 0, elementCollection_1 = elementCollection; _a < elementCollection_1.length; _a++) {\n                            var ele = elementCollection_1[_a];\n                            var destroy = getValue('__vue__.$destroy', ele);\n                            if (destroy) {\n                                ele.__vue__.$destroy();\n                            }\n                            if (ele.innerHTML) {\n                                ele.innerHTML = '';\n                            }\n                        }\n                        delete this.templateCollection[tempName];\n                    }\n                }\n            }\n        },\n        setProperties: function (prop, muteOnChange) {\n            var _this = this;\n            if (this.isVue3) {\n                this.models = !this.models ? this.ej2Instances.referModels : this.models;\n            }\n            if (this.ej2Instances && this.ej2Instances._setProperties) {\n                this.ej2Instances._setProperties(prop, muteOnChange);\n            }\n            if (prop && this.models && this.models.length) {\n                Object.keys(prop).map(function (key) {\n                    _this.models.map(function (model) {\n                        if ((key === model) && !(/datasource/i.test(key))) {\n                            if (_this.isVue3) {\n                                _this.ej2Instances.vueInstance.$emit('update:' + key, prop[key]);\n                            }\n                            else {\n                                _this.$emit('update:' + key, prop[key]);\n                                _this.$emit('modelchanged', prop[key]);\n                            }\n                        }\n                    });\n                });\n            }\n        },\n        trigger: function (eventName, eventProp, successHandler) {\n            if (!isExecute) {\n                this.models = !this.models ? this.ej2Instances.referModels : this.models;\n            }\n            if ((eventName === 'change' || eventName === 'input') && this.models && (this.models.length !== 0)) {\n                var key = this.models.toString().match(/checked|value/) || [];\n                var propKey = key[0];\n                if (eventProp && key && !isUndefined(eventProp[propKey])) {\n                    if (!isExecute) {\n                        this.ej2Instances.vueInstance.$emit('update:' + propKey, eventProp[propKey]);\n                        this.ej2Instances.vueInstance.$emit('modelchanged', eventProp[propKey]);\n                        this.ej2Instances.vueInstance.$emit('update:modelValue', eventProp[propKey]);\n                    }\n                    else {\n                        if (eventName === 'change' || (this.$props && !this.$props.isLazyUpdate)) {\n                            this.$emit('update:' + propKey, eventProp[propKey]);\n                            this.$emit('modelchanged', eventProp[propKey]);\n                        }\n                    }\n                }\n            }\n            else if ((eventName === 'actionBegin' && eventProp.requestType === 'dateNavigate') && this.models && (this.models.length !== 0)) {\n                var key = this.models.toString().match(/currentView|selectedDate/) || [];\n                var propKey = key[0];\n                if (eventProp && key && !isUndefined(eventProp[propKey])) {\n                    if (!isExecute) {\n                        this.ej2Instances.vueInstance.$emit('update:' + propKey, eventProp[propKey]);\n                        this.ej2Instances.vueInstance.$emit('modelchanged', eventProp[propKey]);\n                    }\n                    else {\n                        this.$emit('update:' + propKey, eventProp[propKey]);\n                        this.$emit('modelchanged', eventProp[propKey]);\n                    }\n                }\n            }\n            if ((this.ej2Instances && this.ej2Instances._trigger)) {\n                this.ej2Instances._trigger(eventName, eventProp, successHandler);\n            }\n        },\n        custom: function () {\n            this.updated();\n        },\n        clear: function () {\n            return this.ej2Instances.clear();\n        },\n        ensureVisible: function (item) {\n            return this.ej2Instances.ensureVisible(item);\n        },\n        getData: function (item) {\n            return this.ej2Instances.getData(item);\n        },\n        getLocaleName: function () {\n            return this.ej2Instances.getLocaleName();\n        },\n        hidePopup: function () {\n            return this.ej2Instances.hidePopup();\n        },\n        selectAll: function (state) {\n            return this.ej2Instances.selectAll(state);\n        },\n        showPopup: function () {\n            return this.ej2Instances.showPopup();\n        },\n    }\n});\nexport var DropDownTreePlugin = {\n    name: 'ejs-dropdowntree',\n    install: function (Vue) {\n        Vue.component(DropDownTreePlugin.name, DropDownTreeComponent);\n    }\n};\n","import { ComponentBase, gh, getProps, isExecute, vueDefineComponent } from '@syncfusion/ej2-vue-base';\nimport { isNullOrUndefined, getValue } from '@syncfusion/ej2-base';\nimport { Mention } from '@syncfusion/ej2-dropdowns';\nexport var properties = ['isLazyUpdate', 'plugins', 'allowSpaces', 'cssClass', 'dataSource', 'displayTemplate', 'fields', 'filterType', 'highlight', 'ignoreCase', 'itemTemplate', 'locale', 'mentionChar', 'minLength', 'noRecordsTemplate', 'popupHeight', 'popupWidth', 'query', 'showMentionChar', 'sortOrder', 'spinnerTemplate', 'suffixText', 'suggestionCount', 'target', 'actionBegin', 'actionComplete', 'actionFailure', 'beforeOpen', 'change', 'closed', 'created', 'destroyed', 'filtering', 'opened', 'select'];\nexport var modelProps = [];\nexport var testProp = getProps({ props: properties });\nexport var props = testProp[0], watch = testProp[1], emitProbs = Object.keys(watch);\nemitProbs.push('modelchanged', 'update:modelValue');\nfor (var _i = 0, modelProps_1 = modelProps; _i < modelProps_1.length; _i++) {\n    var props_1 = modelProps_1[_i];\n    emitProbs.push('update:' + props_1);\n}\n/**\n * The Mention contains a list of predefined values from which the user can choose\n * ```html\n * <ejs-mention :dataSource='data'></ejs-mention>\n * ```\n */\nexport var MentionComponent = vueDefineComponent({\n    name: 'MentionComponent',\n    mixins: [ComponentBase],\n    props: props,\n    watch: watch,\n    emits: emitProbs,\n    provide: function () { return { custom: this.custom }; },\n    data: function () {\n        return {\n            ej2Instances: new Mention({}),\n            propKeys: properties,\n            models: modelProps,\n            hasChildDirective: false,\n            hasInjectedModules: false,\n            tagMapper: {},\n            tagNameMapper: {},\n            isVue3: !isExecute,\n            templateCollection: {},\n        };\n    },\n    created: function () {\n        this.bindProperties();\n        this.ej2Instances._setProperties = this.ej2Instances.setProperties;\n        this.ej2Instances.setProperties = this.setProperties;\n        this.ej2Instances.clearTemplate = this.clearTemplate;\n        this.updated = this.updated;\n    },\n    render: function (createElement) {\n        var h = !isExecute ? gh : createElement;\n        var slots = null;\n        if (!isNullOrUndefined(this.$slots.default)) {\n            slots = !isExecute ? this.$slots.default() : this.$slots.default;\n        }\n        return h('div', slots);\n    },\n    methods: {\n        clearTemplate: function (templateNames) {\n            if (!templateNames) {\n                templateNames = Object.keys(this.templateCollection || {});\n            }\n            if (templateNames.length && this.templateCollection) {\n                for (var _i = 0, templateNames_1 = templateNames; _i < templateNames_1.length; _i++) {\n                    var tempName = templateNames_1[_i];\n                    var elementCollection = this.templateCollection[tempName];\n                    if (elementCollection && elementCollection.length) {\n                        for (var _a = 0, elementCollection_1 = elementCollection; _a < elementCollection_1.length; _a++) {\n                            var ele = elementCollection_1[_a];\n                            var destroy = getValue('__vue__.$destroy', ele);\n                            if (destroy) {\n                                ele.__vue__.$destroy();\n                            }\n                            if (ele.innerHTML) {\n                                ele.innerHTML = '';\n                            }\n                        }\n                        delete this.templateCollection[tempName];\n                    }\n                }\n            }\n        },\n        setProperties: function (prop, muteOnChange) {\n            var _this = this;\n            if (this.isVue3) {\n                this.models = !this.models ? this.ej2Instances.referModels : this.models;\n            }\n            if (this.ej2Instances && this.ej2Instances._setProperties) {\n                this.ej2Instances._setProperties(prop, muteOnChange);\n            }\n            if (prop && this.models && this.models.length) {\n                Object.keys(prop).map(function (key) {\n                    _this.models.map(function (model) {\n                        if ((key === model) && !(/datasource/i.test(key))) {\n                            if (_this.isVue3) {\n                                _this.ej2Instances.vueInstance.$emit('update:' + key, prop[key]);\n                            }\n                            else {\n                                _this.$emit('update:' + key, prop[key]);\n                                _this.$emit('modelchanged', prop[key]);\n                            }\n                        }\n                    });\n                });\n            }\n        },\n        custom: function () {\n            this.updated();\n        },\n        addItem: function (items, itemIndex) {\n            return this.ej2Instances.addItem(items, itemIndex);\n        },\n        getDataByValue: function (value) {\n            return this.ej2Instances.getDataByValue(value);\n        },\n        getItems: function () {\n            return this.ej2Instances.getItems();\n        },\n        hidePopup: function (e) {\n            return this.ej2Instances.hidePopup(e);\n        },\n        search: function (text, positionX, positionY) {\n            return this.ej2Instances.search(text, positionX, positionY);\n        },\n        showPopup: function () {\n            return this.ej2Instances.showPopup();\n        },\n    }\n});\nexport var MentionPlugin = {\n    name: 'ejs-mention',\n    install: function (Vue) {\n        Vue.component(MentionPlugin.name, MentionComponent);\n    }\n};\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}